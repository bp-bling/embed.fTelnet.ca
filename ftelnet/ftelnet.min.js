if ("function" !== typeof Blob && "object" !== typeof Blob || "undefined" === typeof URL) if ("function" !== typeof Blob && "object" !== typeof Blob || "undefined" === typeof webkitURL) var Blob = function (a) {
    var b = a.BlobBuilder || a.WebKitBlobBuilder || a.MozBlobBuilder || a.MSBlobBuilder || function (b) {
        var a = function (b) { return Object.prototype.toString.call(b).match(/^\[object\s(.*)\]$/)[1] }, e = function () { this.data = [] }, f = function (b, c, a) { this.data = b; this.size = b.length; this.type = c; this.encoding = a }, g = e.prototype, h = f.prototype, k = b.FileReaderSync,
        l = function (b) { this.code = this[this.name = b] }, m = "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "), p = m.length, q = b.URL || b.webkitURL || b, n = q.createObjectURL, r = q.revokeObjectURL, v = q, y = b.btoa, z = b.atob, D = b.ArrayBuffer, w = b.Uint8Array; for (f.fake = h.fake = !0; p--;) l.prototype[m[p]] = p + 1; q.createObjectURL || (v = b.URL = {}); v.createObjectURL = function (b) {
            var c = b.type; null === c && (c = "application/octet-stream"); if (b instanceof f) return c =
            "data:" + c, "base64" === b.encoding ? c + ";base64," + b.data : "URI" === b.encoding ? c + "," + decodeURIComponent(b.data) : y ? c + ";base64," + y(b.data) : c + "," + encodeURIComponent(b.data); if (n) return n.call(q, b)
        }; v.revokeObjectURL = function (b) { "data:" !== b.substring(0, 5) && r && r.call(q, b) }; g.append = function (b) {
            var c = this.data; if (w && (b instanceof D || b instanceof w)) { var e = ""; b = new w(b); for (var g = 0, h = b.length; g < h; g++) e += String.fromCharCode(b[g]); c.push(e) } else if ("Blob" === a(b) || "File" === a(b)) if (k) e = new k, c.push(e.readAsBinaryString(b));
            else throw new l("NOT_READABLE_ERR"); else b instanceof f ? "base64" === b.encoding && z ? c.push(z(b.data)) : "URI" === b.encoding ? c.push(decodeURIComponent(b.data)) : "raw" === b.encoding && c.push(b.data) : ("string" !== typeof b && (b += ""), c.push(unescape(encodeURIComponent(b))))
        }; g.getBlob = function (b) { arguments.length || (b = null); return new f(this.data.join(""), b, "raw") }; g.toString = function () { return "[object BlobBuilder]" }; h.slice = function (b, c, a) {
            var d = arguments.length; 3 > d && (a = null); return new f(this.data.slice(b, 1 < d ? c :
            this.data.length), a, this.encoding)
        }; h.toString = function () { return "[object Blob]" }; return e
    }(a); return function (c, a) { var e = a ? a.type || "" : "", f = new b; if (c) for (var g = 0, h = c.length; g < h; g++) f.append(c[g]); return f.getBlob(e) }
}("undefined" !== typeof self && self || "undefined" !== typeof window && window || this.content || this); else self.URL = webkitURL;
var saveAs = saveAs || "undefined" !== typeof navigator && navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator) || function (a) {
    if ("undefined" === typeof navigator || !/MSIE [1-9]\./.test(navigator.userAgent)) {
        var b = a.document, c = a.URL || a.webkitURL || a, d = b.createElementNS("http://www.w3.org/1999/xhtml", "a"), e = !a.externalHost && "download" in d, f = a.webkitRequestFileSystem, g = a.requestFileSystem || f || a.mozRequestFileSystem, h = function (b) { (a.setImmediate || a.setTimeout)(function () { throw b; }, 0) }, k = 0, l = [], m =
        function () { for (var b = l.length; b--;) { var a = l[b]; "string" === typeof a ? c.revokeObjectURL(a) : a.remove() } l.length = 0 }, p = function (b, c, a) { c = [].concat(c); for (var d = c.length; d--;) { var e = b["on" + c[d]]; if ("function" === typeof e) try { e.call(b, a || b) } catch (f) { h(f) } } }, q = function (c, h) {
            var m = this, n = c.type, q = !1, t, r, x = function () { var b = (a.URL || a.webkitURL || a).createObjectURL(c); l.push(b); return b }, A = function () { p(m, ["writestart", "progress", "write", "writeend"]) }, s = function () {
                if (q || !t) t = x(c); r ? r.location.href = t : window.open(t,
                "_blank"); m.readyState = m.DONE; A()
            }, u = function (b) { return function () { if (m.readyState !== m.DONE) return b.apply(this, arguments) } }, B = { create: !0, exclusive: !1 }, C; m.readyState = m.INIT; h || (h = "download"); if (e) t = x(c), b = a.document, d = b.createElementNS("http://www.w3.org/1999/xhtml", "a"), d.href = t, d.download = h, n = b.createEvent("MouseEvents"), n.initMouseEvent("click", !0, !1, a, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), d.dispatchEvent(n), m.readyState = m.DONE, A(); else {
                a.chrome && n && "application/octet-stream" !== n && (C = c.slice || c.webkitSlice,
                c = C.call(c, 0, c.size, "application/octet-stream"), q = !0); f && "download" !== h && (h += ".download"); if ("application/octet-stream" === n || f) r = a; g ? (k += c.size, g(a.TEMPORARY, k, u(function (b) {
                    b.root.getDirectory("saved", B, u(function (b) {
                        var a = function () {
                            b.getFile(h, B, u(function (b) {
                                b.createWriter(u(function (a) {
                                    a.onwriteend = function (c) { r.location.href = b.toURL(); l.push(b); m.readyState = m.DONE; p(m, "writeend", c) }; a.onerror = function () { var b = a.error; b.code !== b.ABORT_ERR && s() };["writestart", "progress", "write", "abort"].forEach(function (b) {
                                        a["on" +
                                        b] = m["on" + b]
                                    }); a.write(c); m.abort = function () { a.abort(); m.readyState = m.DONE }; m.readyState = m.WRITING
                                }), s)
                            }), s)
                        }; b.getFile(h, { create: !1 }, u(function (b) { b.remove(); a() }), u(function (b) { b.code === b.NOT_FOUND_ERR ? a() : s() }))
                    }), s)
                }), s)) : s()
            }
        }, n = q.prototype, r = function (b, c) { return new q(b, c) }; n.abort = function () { this.readyState = this.DONE; p(this, "abort") }; n.readyState = n.INIT = 0; n.WRITING = 1; n.DONE = 2; n.error = n.onwritestart = n.onprogress = n.onwrite = n.onabort = n.onerror = n.onwriteend = null; a.addEventListener("unload", m, !1);
        r.unload = function () { m(); a.removeEventListener("unload", m, !1) }; return r
    }
}("undefined" !== typeof self && self || "undefined" !== typeof window && window || this.content); "undefined" !== typeof module && (module.exports = saveAs);
var fTelnet = function () {
    function a() { } a.Init = function () {
        var b = this; if (null === document.getElementById("fTelnetContainer")) return alert('fTelnet Error: Element with id="fTelnetContainer" was not found'), !1; this._Container = document.getElementById("fTelnetContainer"); this._InitMessageBar = document.createElement("div"); this._InitMessageBar.id = "fTelnetInitMessage"; this._InitMessageBar.innerHTML = "Initializing fTelnet..."; this._Container.appendChild(this._InitMessageBar); if ("Microsoft Internet Explorer" ===
        navigator.appName) { var c = -1; null !== /MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent) && (c = parseFloat(RegExp.$1)); if (9 > c) return this._InitMessageBar.innerHTML = "fTelnet Error: Internet Explorer < 9 is not supported.<br /><br />Please upgrade to IE 9 or newer, or better still would be to use Firefox or Chrome instead of IE.", !1 } this._ButtonBar = document.createElement("div"); this._ButtonBar.id = "fTelnetButtons"; this._ButtonBar.innerHTML = '<a href="#" onclick="fTelnet.Connect();">Connect</a> | <a href="#" onclick="fTelnet.Download();">Download</a> | <a href="#" onclick="fTelnet.Upload();">Upload</a> | <a href="#" onclick="fTelnet.EnterScrollback();">Scrollback</a> | <a href="#" onclick="fTelnet.FullScreenToggle();">Full&nbsp;Screen<a/>';
        this._ButtonBar.style.display = this._ButtonBarVisible ? "block" : "none"; this._Container.appendChild(this._ButtonBar); this._ScrollbackBar = document.createElement("div"); this._ScrollbackBar.id = "fTelnetScrollback"; this._ScrollbackBar.innerHTML = '<a href="#" onclick="Crt.PushKeyDown(Keyboard.UP, Keyboard.UP, false, false, false);">Line Up</a> | <a href="#" onclick="Crt.PushKeyDown(Keyboard.DOWN, Keyboard.DOWN, false, false, false);">Line Down</a> | <a href="#" onclick="Crt.PushKeyDown(Keyboard.PAGE_UP, Keyboard.PAGE_UP, false, false, false);">Page Up</a> | <a href="#" onclick="Crt.PushKeyDown(Keyboard.PAGE_DOWN, Keyboard.PAGE_DOWN, false, false, false);">Page Down</a> | <a href="#" onclick="fTelnet.ExitScrollback();">Exit</a>';
        this._ScrollbackBar.style.display = "none"; this._Container.appendChild(this._ScrollbackBar); this._FocusWarningBar = document.createElement("div"); this._FocusWarningBar.id = "fTelnetFocusWarning"; this._FocusWarningBar.innerHTML = "*** CLICK HERE TO GIVE fTelnet FOCUS ***"; this._FocusWarningBar.style.display = "none"; this._Container.appendChild(this._FocusWarningBar); if (Crt.Init(this._Container)) {
            this._InitMessageBar.style.display = "none"; Crt.onfontchange.on(function () { b.OnCrtScreenSizeChanged() }); Crt.onscreensizechange.on(function () { b.OnCrtScreenSizeChanged() });
            Crt.BareLFtoCRLF = this._BareLFtoCRLF; Crt.Blink = this._Blink; Crt.LocalEcho = this._LocalEcho; Crt.SetFont(this._Font); Crt.SetScreenSize(this._ScreenColumns, this._ScreenRows); if (!("WebSocket" in window)) return Crt.WriteLn(), Crt.WriteLn("Sorry, but your browser doesn't support the WebSocket protocol!"), Crt.WriteLn(), Crt.WriteLn("WebSockets are how fTelnet connects to the remote server, so without them that"), Crt.WriteLn("means you won't be able to connect anywhere."), Crt.WriteLn(), Crt.WriteLn("If you can, try upgrading your web browser.  If that's not an option (ie you're"),
            Crt.WriteLn("already running the latest version your platform supports, like IE 8 on"), Crt.WriteLn("Windows XP), then try switching to a different web browser."), Crt.WriteLn(), Crt.WriteLn("Feel free to contact me (http://www.ftelnet.ca/contact/) if you think you're"), Crt.WriteLn("seeing this message in error, and I'll look into it.  Be sure to let me know"), Crt.WriteLn("what browser you use, as well as which version it is."), console.log("fTelnet Error: WebSocket not supported"), !1; this._StatusBar =
            document.createElement("div"); this._StatusBar.id = "fTelnetStatusBar"; this._StatusBar.innerHTML = "Not connected"; this._StatusBar.style.display = this._StatusBarVisible ? "block" : "none"; this._Container.appendChild(this._StatusBar); VirtualKeyboard.Init(this._Container); this.OnCrtScreenSizeChanged(); Ansi.onesc5n.on(function () { b.OnAnsiESC5n() }); Ansi.onesc6n.on(function () { b.OnAnsiESC6n() }); Ansi.onesc255n.on(function () { b.OnAnsiESC255n() }); Ansi.onescQ.on(function (c) { b.OnAnsiESCQ(c) }); Ansi.Write(atob(this._SplashScreen))
        } else return this._InitMessageBar.innerHTML =
        "fTelnet Error: Unable to init Crt class", this._ButtonBar.style.display = "none", this._ScrollbackBar.style.display = "none", this._FocusWarningBar.style.display = "none", !1; this._Timer = setInterval(function () { b.OnTimer() }, 50); c = document.createElement("input"); c.type = "file"; c.id = "fTelnetUpload"; c.onchange = function () { b.OnUploadFileSelected() }; c.style.display = "none"; this._Container.appendChild(c); return !0
    }; Object.defineProperty(a, "BareLFtoCRLF", {
        get: function () { return this._BareLFtoCRLF }, set: function (b) {
            this._BareLFtoCRLF =
            b; Crt.BareLFtoCRLF = b
        }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a, "BitsPerSecond", { get: function () { return this._BitsPerSecond }, set: function (b) { this._BitsPerSecond = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "Blink", { get: function () { return this._Blink }, set: function (b) { this._Blink = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ButtonBarVisible", {
        get: function () { return this._ButtonBarVisible }, set: function (b) {
            this._ButtonBarVisible = b; null != this._ButtonBar && (this._ButtonBar.style.display =
            b ? "block" : "none")
        }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a, "ConnectionType", { get: function () { return this._ConnectionType }, set: function (b) { this._ConnectionType = b }, enumerable: !0, configurable: !0 }); a.Connect = function () {
        var b = this; if (null === this._Connection || !this._Connection.connected) {
            switch (this._ConnectionType) { default: this._Connection = new TelnetConnection } this._Connection.LocalEcho = this._LocalEcho; this._Connection.onclose.on(function () { b.OnConnectionClose() }); this._Connection.onconnect.on(function () { b.OnConnectionConnect() });
            this._Connection.onlocalecho.on(function (c) { b.OnConnectionLocalEcho(c) }); this._Connection.onioerror.on(function () { b.OnConnectionIOError() }); this._Connection.onsecurityerror.on(function () { b.OnConnectionSecurityError() }); Crt.NormVideo(); Crt.ClrScr(); "" === this._ProxyHostname ? (this._StatusBar.innerHTML = "Connecting to " + this._Hostname + ":" + this._Port, this._Connection.connect(this._Hostname, this._Port)) : (this._StatusBar.innerHTML = "Connecting to " + this._Hostname + ":" + this._Port + " via proxy", this._Connection.connect(this._Hostname,
            this._Port, this._ProxyHostname, this._ProxyPort, this._ProxyPortSecure))
        }
    }; Object.defineProperty(a, "Connected", { get: function () { return null === this._Connection ? !1 : this._Connection.connected }, enumerable: !0, configurable: !0 }); a.Disconnect = function (b) {
        return null !== this._Connection && this._Connection.connected ? !b || confirm("Are you sure you want to disconnect?") ? (this._Connection.onclose.off(), this._Connection.onconnect.off(), this._Connection.onioerror.off(), this._Connection.onlocalecho.off(), this._Connection.onsecurityerror.off(),
        this._Connection.close(), this._Connection = null, this.OnConnectionClose(), !0) : !1 : !0
    }; a.Download = function () { var b = this; null !== this._Connection && this._Connection.connected && (this._YModemReceive = new YModemReceive(this._Connection), clearInterval(this._Timer), this._YModemReceive.ontransfercomplete.on(function () { b.OnDownloadComplete() }), this._YModemReceive.Download()) }; Object.defineProperty(a, "Enter", { get: function () { return this._Enter }, set: function (b) { this._Enter = b }, enumerable: !0, configurable: !0 }); a.EnterScrollback =
    function () { this._ScrollbackBar.style.display = "none"; Crt.EnterScrollBack(); this._ScrollbackBar.style.display = "block" }; a.ExitScrollback = function () { this._ScrollbackBar.style.display = "block"; Crt.PushKeyDown(27, 27, !1, !1, !1); this._ScrollbackBar.style.display = "none" }; Object.defineProperty(a, "Font", { get: function () { return this._Font }, set: function (b) { this._Font = b }, enumerable: !0, configurable: !0 }); a.FullScreenToggle = function () {
        document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement ||
        document.msFullscreenElement ? document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen() : this._Container.requestFullscreen ? this._Container.requestFullscreen() : this._Container.msRequestFullscreen ? this._Container.msRequestFullscreen() : this._Container.mozRequestFullScreen ? this._Container.mozRequestFullScreen() : this._Container.webkitRequestFullscreen &&
        this._Container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
    }; Object.defineProperty(a, "Hostname", { get: function () { return this._Hostname }, set: function (b) { this._Hostname = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "LocalEcho", { get: function () { return this._LocalEcho }, set: function (b) { this._LocalEcho = b; Crt.LocalEcho = b; null !== this._Connection && this._Connection.connected && (this._Connection.LocalEcho = b) }, enumerable: !0, configurable: !0 }); a.OnAnsiESC5n = function () { this._Connection.writeString("\u001b[0n") };
    a.OnAnsiESC6n = function () { this._Connection.writeString(Ansi.CursorPosition()) }; a.OnAnsiESC255n = function () { this._Connection.writeString(Ansi.CursorPosition(Crt.WindCols, Crt.WindRows)) }; a.OnAnsiESCQ = function (b) { Crt.SetFont(b) }; a.OnConnectionClose = function () { this._StatusBar.innerHTML = "Disconnected from " + this._Hostname + ":" + this._Port }; a.OnConnectionConnect = function () {
        Crt.ClrScr(); this._StatusBar.innerHTML = "" === this._ProxyHostname ? "Connected to " + this._Hostname + ":" + this._Port : "Connected to " + this._Hostname +
        ":" + this._Port + " via proxy"
    }; a.OnConnectionLocalEcho = function (b) { this._LocalEcho = b; Crt.LocalEcho = b }; a.OnConnectionIOError = function () { console.log("fTelnet.OnConnectionIOError") }; a.OnConnectionSecurityError = function () { this._StatusBar.innerHTML = "" === this._ProxyHostname ? "Unable to connect to " + this._Hostname + ":" + this._Port : "Unable to connect to " + this._Hostname + ":" + this._Port + " via proxy" }; a.OnCrtScreenSizeChanged = function () {
        var b = Crt.ScreenCols * Crt.Font.Width; null != this._FocusWarningBar && (this._FocusWarningBar.style.width =
        b - 10 + "px"); null != this._ButtonBar && (this._ButtonBar.style.width = b - 10 + "px"); null != this._ScrollbackBar && (this._ScrollbackBar.style.width = b - 10 + "px"); null != this._StatusBar && (this._StatusBar.style.width = b - 10 + "px"); for (var c = document.getElementById("fTelnetScript").src.replace("/ftelnet.min.js", "/keyboard/keyboard-{size}.min.css"), c = c.replace("/ftelnet.debug.js", "/keyboard/keyboard-{size}.min.css"), a = [960, 800, 720, 640, 560, 480], e = 0; e < a.length; e++) if (b >= a[e] || e === a.length - 1) {
            document.getElementById("fTelnetKeyboardCss").href =
            c.replace("{size}", a[e].toString(10)); break
        }
    }; a.OnDownloadComplete = function () { var b = this; this._Timer = setInterval(function () { b.OnTimer() }, 50) }; a.OnTimer = function () {
        if (null !== this._Connection && this._Connection.connected) {
            document.hasFocus() && !this._HasFocus ? (this._HasFocus = !0, this._FocusWarningBar.style.display = "none") : !document.hasFocus() && this._HasFocus && (this._HasFocus = !1, this._FocusWarningBar.style.display = "block"); var b = (new Date).getTime() - this._LastTimer; 1 > b && (b = 1); b = Math.floor(this._BitsPerSecond /
            8 / (1E3 / b)); 1 > b && (b = 1); b = this._Connection.readString(b); for (0 < b.length && Ansi.Write(b) ; Crt.KeyPressed() ;) b = Crt.ReadKey(), null !== b && 0 < b.keyString.length && ("\r\n" === b.keyString ? this._Connection.writeString(this._Enter) : this._Connection.writeString(b.keyString))
        } this._LastTimer = (new Date).getTime()
    }; a.OnUploadComplete = function () { var b = this; this._Timer = setInterval(function () { b.OnTimer() }, 50) }; a.OnUploadFileSelected = function () {
        var b = this; if (null !== this._Connection && this._Connection.connected) {
            var c = document.getElementById("fTelnetUpload");
            this._YModemSend = new YModemSend(this._Connection); clearInterval(this._Timer); this._YModemSend.ontransfercomplete.on(function () { b.OnUploadComplete() }); for (var a = 0; a < c.files.length; a++) this.UploadFile(c.files[a], c.files.length)
        }
    }; Object.defineProperty(a, "Port", { get: function () { return this._Port }, set: function (b) { this._Port = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ProxyHostname", { get: function () { return this._ProxyHostname }, set: function (b) { this._ProxyHostname = b }, enumerable: !0, configurable: !0 });
    Object.defineProperty(a, "ProxyPort", { get: function () { return this._ProxyPort }, set: function (b) { this._ProxyPort = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ProxyPortSecure", { get: function () { return this._ProxyPortSecure }, set: function (b) { this._ProxyPortSecure = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ScreenColumns", { get: function () { return this._ScreenColumns }, set: function (b) { this._ScreenColumns = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ScreenRows", {
        get: function () { return this._ScreenRows },
        set: function (b) { this._ScreenRows = b }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a, "SplashScreen", { get: function () { return this._SplashScreen }, set: function (b) { this._SplashScreen = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "StatusBarVisible", { get: function () { return this._StatusBarVisible }, set: function (b) { this._StatusBarVisible = b; null != this._StatusBar && (this._StatusBar.style.display = b ? "block" : "none") }, enumerable: !0, configurable: !0 }); a.Upload = function () {
        null !== this._Connection &&
        this._Connection.connected && document.getElementById("fTelnetUpload").click()
    }; a.UploadFile = function (b, c) { var a = this, e = new FileReader; e.onload = function () { for (var f = new FileRecord(b.name, b.size), g = new Uint8Array(e.result), h = 0; h < g.length; h++) f.data.writeByte(g[h]); f.data.position = 0; a._YModemSend.Upload(f, c) }; e.readAsArrayBuffer(b) }; Object.defineProperty(a, "VirtualKeyboardVisible", {
        get: function () { return this._VirtualKeyboardVisible }, set: function (b) {
            this._VirtualKeyboardVisible = b; VirtualKeyboard.Visible =
            b
        }, enumerable: !0, configurable: !0
    }); a._ButtonBar = null; a._Connection = null; a._Container = null; a._FocusWarningBar = null; a._HasFocus = !0; a._InitMessageBar = null; a._LastTimer = 0; a._ScrollbackBar = null; a._StatusBar = null; a._Timer = null; a._YModemReceive = null; a._YModemSend = null; a._BareLFtoCRLF = !1; a._BitsPerSecond = 57600; a._Blink = !0; a._ButtonBarVisible = !0; a._ConnectionType = "telnet"; a._Enter = "\r"; a._Font = "CP437"; a._Hostname = "bbs.ftelnet.ca"; a._LocalEcho = !1; a._Port = 1123; a._ProxyHostname = ""; a._ProxyPort = 1123; a._ProxyPortSecure =
    11235; a._ScreenColumns = 80; a._ScreenRows = 25; a._SplashScreen = "G1swbRtbMkobWzA7MEgbWzE7NDQ7MzRt2sTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEG1swOzQ0OzMwbb8bWzBtDQobWzE7NDQ7MzRtsyAgG1szN21XZWxjb21lISAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAbWzA7NDQ7MzBtsxtbMG0NChtbMTs0NDszNG3AG1swOzQ0OzMwbcTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE2RtbMG0NCg0KG1sxbSAbWzBtIBtbMTs0NDszNG3axMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMQbWzA7NDQ7MzBtvxtbMG0NCiAgG1sxOzQ0OzM0bbMbWzA7MzRt29vb2xtbMzBt29vb29vb29vb29vb29vb29vb29vb2xtbMzRt29vb29vbG1s0NDszMG2zG1swbQ0KICAbWzE7NDQ7MzRtsxtbMDszNG3b29vbG1sxOzMwbdvb29vb29vb29vb29vb29vb29vb29sbWzA7MzBt29sbWzM0bdvb29sbWzQ0OzMwbbMbWzBtDQogIBtbMTs0NDszNG2zG1swOzM0bdvb29sbWzE7MzBt29vb2xtbMG3b29vb29vb29vb29sbWzFt29vb2xtbMzBt29sbWzA7MzBt29sbWzM0bdvb29sbWzQ0OzMwbbMbWzBtDQogIBtbMTs0NDszNG2zG1swOzM0bdvb29sbWzE7MzBt29vb2xtbMG3b29vb29vb29vbG1sxbdvb29sbWzBt29sbWzE7MzBt29sbWzA7MzBt29sbWzM0bdvb29sbWzQ0OzMwbbMbWzBtDQogIBtbMTs0NDszNG2zG1swOzM0bdvb29sbWzE7MzBt29vb2xtbMG3b29vb29vb2xtbMW3b29vbG1swbdvbG1sxbdvbG1szMG3b2xtbMDszMG3b2xtbMzRt29vb2xtbNDQ7MzBtsxtbMG0NCiAgG1sxOzQ0OzM0bbMbWzA7MzRt29vb2xtbMTszMG3b29vbG1swbdvb29vb2xtbMW3b29vbG1swbdvbG1sxbdvb29sbWzMwbdvbG1swOzMwbdvbG1szNG3b29vbG1s0NDszMG2zG1swbQ0KICAbWzE7NDQ7MzRtsxtbMDszNG3b29vbG1sxOzMwbdvb29sbWzBt29vb2xtbMW3b29vbG1swbdvbG1sxbdvb29vb2xtbMzBt29sbWzA7MzBt29sbWzM0bdvb29sbWzQ0OzMwbbMbWzQwOzM3bQ0KICAbWzE7NDQ7MzRtsxtbMDszNG3b29vbG1sxOzMwbdvbG1swOzMwbdvbG1sxbdvb29vb29vb29vb29vb29vb2xtbMDszMG3b2xtbMzRt29vb2xtbNDQ7MzBtsxtbNDA7MzdtDQogIBtbMTs0NDszNG2zG1swOzM0bdvb29sbWzE7MzBt29sbWzBt29vb29vb29vb29vb29vb29vb29sbWzMwbdvbG1szNG3b29vbG1s0NDszMG2zG1s0MDszN20NCiAgG1sxOzQ0OzM0bbMbWzA7MzBt29vb29vb29vb29vb29vb29vb29vb29vb29vb29vbG1szNG3b2xtbNDQ7MzBtsxtbNDA7MzdtDQogIBtbMTs0NDszNG2zG1s0MDszMG3b2xtbMG3b29vb29vb29vb29vb29vb29vb29vb29vb29vbG1szMG3b2xtbNDRtsxtbNDA7MzdtIBtbMzRtIBtbMTs0NzszN23axMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMQbWzMwbb8bWzBtDQogIBtbMTs0NDszNG2zG1swOzMwbdvbG1sxbdvb29vb29vb29vb29vb29sbWzA7MzBt29vb29vb29vb2xtbMW3b2xtbMDszMG3b2xtbNDRtsxtbNDA7MzdtIBtbMzRtIBtbMTs0NzszN22zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAbWzMwbbMbWzBtDQogIBtbMTs0NDszNG2zG1s0MDszMG3b2xtbMG3b29vb29vb29vb29vb29vb29vb29vb29vb29vbG1szMG3b2xtbNDRtsxtbMG0gG1szNG0gG1sxOzQ3OzM3bbMgICAbWzM0bUh0bWxUZXJtIC0tIFRlbG5ldCBmb3IgdGhlIFdlYiAgICAgG1szMG2zG1swbQ0KG1sxbSAbWzBtIBtbMTs0NDszNG2zG1swOzMwbdvbG1sxbdvb29vb29vb29vb29vb29vb29vb29vb2xtbMDszMG3b29vb29sbWzQ0bbMbWzBtIBtbMzRtIBtbMTs0NzszN22zICAgICAbWzA7NDc7MzRtV2ViIGJhc2VkIEJCUyB0ZXJtaW5hbCBjbGllbnQgICAgG1sxOzMwbbMbWzBtDQogIBtbMTs0NDszNG2zG1swOzM0bdvbG1szMG3b29vb29vb29vb29vb29vb29vb29vb29vb29vbG1szNG3b2xtbNDQ7MzBtsxtbMG0gG1szNG0gG1sxOzQ3OzM3bbMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIBtbMzBtsxtbMG0NCiAgG1sxOzQ0OzM0bcAbWzA7NDQ7MzBtxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTZG1swbSAbWzM0bSAbWzE7NDc7MzdtwBtbMzBtxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTZG1swbQ0KDQobWzExQxtbMTszMm1Db3B5cmlnaHQgKEMpIDIwMDAtMjAxNCBSJk0gU29mdHdhcmUuICBBbGwgUmlnaHRzIFJlc2VydmVkDQobWzA7MzRtxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExA==";
    a._StatusBarVisible = !0; a._VirtualKeyboardVisible = !0; return a
}();
(function () {
    function a(b) {
        b = String(b); var a = 0, e = [], f = 0, g = 0, h; b = b.replace(/\s/g, ""); 0 === b.length % 4 && (b = b.replace(/=+$/, "")); if (1 === b.length % 4) throw Error("InvalidCharacterError"); if (/[^+/0-9A-Za-z]/.test(b)) throw Error("InvalidCharacterError"); for (; a < b.length;) h = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b.charAt(a)), f = f << 6 | h, g += 6, 24 === g && (e.push(String.fromCharCode(f >> 16 & 255)), e.push(String.fromCharCode(f >> 8 & 255)), e.push(String.fromCharCode(f & 255)), f = g = 0), a += 1; 12 ===
        g ? e.push(String.fromCharCode(f >> 4 & 255)) : 18 === g && (f >>= 2, e.push(String.fromCharCode(f >> 8 & 255)), e.push(String.fromCharCode(f & 255))); return e.join("")
    } function b(b) {
        b = String(b); var a = 0, e = [], f, g, h, k; if (/[^\x00-\xFF]/.test(b)) throw Error("InvalidCharacterError"); for (; a < b.length;) f = b.charCodeAt(a++), g = b.charCodeAt(a++), h = b.charCodeAt(a++), k = f >> 2, f = (f & 3) << 4 | g >> 4, g = (g & 15) << 2 | h >> 6, h &= 63, a === b.length + 2 ? h = g = 64 : a === b.length + 1 && (h = 64), e.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(k),
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(f), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(g), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(h)); return e.join("")
    } "atob" in window && "btoa" in window || (window.atob = a, window.btoa = b)
})(); var Offset;
(function (a) { a.getOffset = function (b) { if (b.getBoundingClientRect) { b = b.getBoundingClientRect(); var c = document.body, a = document.documentElement, e = b.left + (window.pageXOffset || a.scrollLeft || c.scrollLeft) - (a.clientLeft || c.clientLeft || 0); return { y: Math.round(b.top + (window.pageYOffset || a.scrollTop || c.scrollTop) - (a.clientTop || c.clientTop || 0)), x: Math.round(e) } } for (a = c = 0; b;) c += b.offsetTop, a += b.offsetLeft, b = b.offsetParent; return { y: c, x: a } } })(Offset || (Offset = {}));
var TypedEvent = function () { function a() { this._listeners = [] } a.prototype.on = function (b) { this._listeners.push(b) }; a.prototype.off = function (b) { if ("function" === typeof b) for (var c = this._listeners.length; 0 < c; c++) { if (this._listeners[0] === b) { this._listeners.splice(0, 1); break } } else this._listeners = [] }; a.prototype.trigger = function () { for (var b = [], c = 0; c < arguments.length - 0; c++) b[c] = arguments[c + 0]; for (var c = {}, a = this._listeners.slice(0), e = 0, f = a.length; e < f; e++) a[e].apply(c, b || []) }; return a }(), ByteArray = function () {
    function a() {
        this._Bytes =
        []; this._Position = this._Length = 0
    } Object.defineProperty(a.prototype, "bytesAvailable", { get: function () { return this._Length - this._Position }, enumerable: !0, configurable: !0 }); a.prototype.clear = function () { this._Bytes = []; this._Position = this._Length = 0 }; Object.defineProperty(a.prototype, "length", {
        get: function () { return this._Length }, set: function (b) {
            if (0 >= b) this.clear(); else {
                if (b < this._Length) this._Bytes.splice(b, this._Length - b); else if (b > this._Length) for (var c = this._Length + 1; c <= b; c++) this._Bytes.push(0); this._Length =
                b
            }
        }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "position", { get: function () { return this._Position }, set: function (b) { 0 >= b ? b = 0 : b >= this._Length && (b = this._Length); this._Position = b }, enumerable: !0, configurable: !0 }); a.prototype.readBytes = function (b, c, a) {
        "undefined" === typeof c && (c = 0); "undefined" === typeof a && (a = 0); if (this._Position + a > this._Length) throw "There is not sufficient data available to read."; var e = b.position; b.position = c; for (c = 0; c < a; c++) b.writeByte(this._Bytes[this._Position++] &
        255); b.position = e
    }; a.prototype.readString = function (b) { "undefined" === typeof b && (b = this._Length); for (var c = ""; 0 < b-- && this._Position < this._Length;) c += String.fromCharCode(this._Bytes[this._Position++]); 0 === this.bytesAvailable && this.clear(); return c }; a.prototype.readUnsignedByte = function () { if (this._Position >= this._Length) throw "There is not sufficient data available to read."; return this._Bytes[this._Position++] & 255 }; a.prototype.readUnsignedShort = function () {
        if (this._Position >= this._Length - 1) throw "There is not sufficient data available to read.";
        return ((this._Bytes[this._Position++] & 255) << 8) + (this._Bytes[this._Position++] & 255)
    }; a.prototype.toString = function () { for (var b = "", c = 0; c < this._Length; c++) b += String.fromCharCode(this._Bytes[c]); return b }; a.prototype.writeByte = function (b) { this._Bytes[this._Position++] = b & 255; this._Position > this._Length && this._Length++ }; a.prototype.writeBytes = function (b, c, a) {
        c || (c = 0); a || (a = 0); 0 > c && (c = 0); if (!(0 > a)) {
            0 === a && (a = b.length); c >= b.length && (c = 0); a > b.length && (a = b.length); c + a > b.length && (a = b.length - c); var e = b.position;
            b.position = c; for (c = 0; c < a; c++) this.writeByte(b.readUnsignedByte()); b.position = e
        }
    }; a.prototype.writeShort = function (b) { this.writeByte((b & 65280) >> 8); this.writeByte(b & 255) }; a.prototype.writeString = function (b) { for (var a = b.length, d = 0; d < a; d++) this.writeByte(b.charCodeAt(d)) }; return a
}(), Keyboard;
(function (a) {
    a[a.ALTERNATE = 18] = "ALTERNATE"; a[a.APPMENU = 1001] = "APPMENU"; a[a.BACKSPACE = 8] = "BACKSPACE"; a[a.BREAK = 1E3] = "BREAK"; a[a.CAPS_LOCK = 20] = "CAPS_LOCK"; a[a.CONTROL = 17] = "CONTROL"; a[a.DELETE = 46] = "DELETE"; a[a.DOWN = 40] = "DOWN"; a[a.END = 35] = "END"; a[a.ESCAPE = 27] = "ESCAPE"; a[a.ENTER = 13] = "ENTER"; a[a.F1 = 112] = "F1"; a[a.F2 = 113] = "F2"; a[a.F3 = 114] = "F3"; a[a.F4 = 115] = "F4"; a[a.F5 = 116] = "F5"; a[a.F6 = 117] = "F6"; a[a.F7 = 118] = "F7"; a[a.F8 = 119] = "F8"; a[a.F9 = 120] = "F9"; a[a.F10 = 121] = "F10"; a[a.F11 = 122] = "F11"; a[a.F12 = 123] = "F12"; a[a.HOME =
    36] = "HOME"; a[a.INSERT = 45] = "INSERT"; a[a.LEFT = 37] = "LEFT"; a[a.NUM_LOCK = 1002] = "NUM_LOCK"; a[a.PAGE_DOWN = 34] = "PAGE_DOWN"; a[a.PAGE_UP = 33] = "PAGE_UP"; a[a.PRINT_SCREEN = 1006] = "PRINT_SCREEN"; a[a.RIGHT = 39] = "RIGHT"; a[a.SHIFT = 16] = "SHIFT"; a[a.SHIFTLEFT = 1004] = "SHIFTLEFT"; a[a.SHIFTRIGHT = 1005] = "SHIFTRIGHT"; a[a.SPACE = 32] = "SPACE"; a[a.TAB = 9] = "TAB"; a[a.WINDOWS = 1003] = "WINDOWS"; a[a.UP = 38] = "UP"
})(Keyboard || (Keyboard = {}));
var Point = function () { return function (a, b) { this.x = a; this.y = b } }(), Ansi = function () {
    function a() { } a.AnsiCommand = function (b) {
        var a = 0, d = a = 0; switch (b) {
            case "!": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); switch (parseInt(this._AnsiParams.shift(), 10)) {
                case 0: this.onripdetect.trigger(); break; case 1: this.onripdisable.trigger(); break; case 2: this.onripenable.trigger(); break; default: console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" +
                b + ")")
            } break; case "@": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.InsChar(a); break; case "{": console.log("Unhandled ESC sequence: Indicates that a font block is following"); break; case "A": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); d = Math.max(1, Crt.WhereY() - d); Crt.GotoXY(Crt.WhereX(), d); break; case "B": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(),
            10)); d = Math.min(Crt.WindRows, Crt.WhereY() + d); Crt.GotoXY(Crt.WhereX(), d); break; case "C": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); a = Math.min(Crt.WindCols, Crt.WhereX() + a); Crt.GotoXY(a, Crt.WhereY()); break; case "c": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); console.log("Unhandled ESC sequence: Device Attributes"); break; case "D": if (0 === this._AnsiIntermediates.length) 1 > this._AnsiParams.length && this._AnsiParams.push("1"), a = Math.max(1,
            parseInt(this._AnsiParams.shift(), 10)), a = Math.max(1, Crt.WhereX() - a), Crt.GotoXY(a, Crt.WhereY()); else if (-1 !== this._AnsiIntermediates.indexOf(" ")) { for (; 2 > this._AnsiParams.length;) this._AnsiParams.push("0"); a = parseInt(this._AnsiParams.shift(), 10); d = parseInt(this._AnsiParams.shift(), 10); 0 === a && 0 <= d && 40 >= d ? Crt.SetFont("SyncTerm-" + d.toString(10)) : console.log("Unhandled ESC sequence: Secondary Font Selection (set font " + a + " to " + d + ")"); break } break; case "E": 1 > this._AnsiParams.length && this._AnsiParams.push("1");
                d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); d = Math.min(Crt.WindRows, Crt.WhereY() + d); Crt.GotoXY(1, d); break; case "F": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); d = Math.max(1, Crt.WhereY() - d); Crt.GotoXY(1, d); break; case "G": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); 1 <= a && a <= Crt.WindCols && Crt.GotoXY(a, Crt.WhereY()); break; case "H": case "f": for (; 2 > this._AnsiParams.length;) this._AnsiParams.push("1");
                    d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.GotoXY(a, d); break; case "h": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); switch (this._AnsiParams[0]) {
                        case "=255": console.log("Unhandled ESC sequence: Enable DoorWay Mode"); break; case "?6": console.log("Unhandled ESC sequence: Enable origin mode"); break; case "?7": console.log("Unhandled ESC sequence: Enable auto wrap"); break; case "?25": Crt.ShowCursor(); break; case "?31": console.log("Unhandled ESC sequence: Enable alt character set");
                            break; case "?32": console.log("Unhandled ESC sequence: Bright Intensity Enable"); break; case "?33": console.log("Unhandled ESC sequence: Blink to Bright Intensity Background"); break; default: console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" + b + ")")
                    } break; case "J": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); switch (parseInt(this._AnsiParams.shift(), 10)) { case 0: Crt.ClrEos(); break; case 1: Crt.ClrBos(); break; case 2: Crt.ClrScr() } break;
            case "K": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); switch (parseInt(this._AnsiParams.shift(), 10)) { case 0: Crt.ClrEol(); break; case 1: Crt.ClrBol(); break; case 2: Crt.ClrLine() } break; case "L": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.InsLine(d); break; case "l": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); switch (this._AnsiParams[0]) {
                case "=255": console.log("Unhandled ESC sequence: Disable DoorWay Mode"); break; case "?6": console.log("Unhandled ESC sequence: Disable origin mode");
                    break; case "?7": console.log("Unhandled ESC sequence: Disable auto wrap"); break; case "?25": Crt.HideCursor(); break; case "?31": console.log("Unhandled ESC sequence: Disable alt character set"); break; case "?32": console.log("Unhandled ESC sequence: Bright Intensity Disable"); break; case "?33": console.log("Unhandled ESC sequence: Blink Normal"); break; default: console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" + b + ")")
            } break; case "M": if ("=" ===
            this._AnsiParams[0][0]) switch (1 > this._AnsiParams.length && this._AnsiParams.push("0"), a = parseInt(this._AnsiParams.shift(), 10), a) {
                case 0: console.log("Unhandled ESC sequence: Only CSI | will introduce an ANSI music string."); break; case 1: console.log("Unhandled ESC sequence: Both CSI | and CSI N will introduce an ANSI music string."); break; case 2: console.log("Unhandled ESC sequence: CSI |, CSI N, and CSI M will all intriduce and ANSI music string."); break; default: console.log("Unknown ESC sequence: PB(" +
                this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" + b + ")")
            } else 1 > this._AnsiParams.length && this._AnsiParams.push("1"), d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)), Crt.DelLine(d); break; case "m": for (1 > this._AnsiParams.length && this._AnsiParams.push("0") ; 0 < this._AnsiParams.length;) switch (a = parseInt(this._AnsiParams.shift(), 10), a) {
                case 0: Crt.NormVideo(); break; case 1: Crt.HighVideo(); break; case 2: Crt.LowVideo(); break; case 5: Crt.SetBlink(!0); Crt.SetBlinkRate(500); break; case 6: Crt.SetBlink(!0);
                    Crt.SetBlinkRate(250); break; case 7: Crt.ReverseVideo(); break; case 8: this._AnsiAttr = Crt.TextAttr; Crt.Conceal(); break; case 22: Crt.LowVideo(); break; case 25: Crt.SetBlink(!1); break; case 27: Crt.ReverseVideo(); break; case 28: Crt.TextAttr = this._AnsiAttr; break; case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: a = this.ANSI_COLORS[a - 30]; 7 < Crt.TextAttr % 16 && (a += 8); Crt.TextColor(a); break; case 39: a = this.ANSI_COLORS[7]; 7 < Crt.TextAttr % 16 && (a += 8); Crt.TextColor(a); break; case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: a =
                    this.ANSI_COLORS[a - 40]; Crt.TextBackground(a); break; case 49: a = this.ANSI_COLORS[0], Crt.TextBackground(a)
            } break; case "N": console.log("Unhandled ESC sequence: ANSI Music"); break; case "n": 1 > this._AnsiParams.length && this._AnsiParams.push("0"); a = parseInt(this._AnsiParams.shift(), 10); switch (a) {
                case 5: this.onesc5n.trigger(); break; case 6: this.onesc6n.trigger(); break; case 255: this.onesc255n.trigger(); break; default: console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() +
                ") FB(" + b + ")")
            } break; case "P": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.DelChar(a); break; case "Q": for (; 3 > this._AnsiParams.length;) this._AnsiParams.push("0"); a = parseInt(this._AnsiParams.shift(), 10); parseInt(this._AnsiParams.shift(), 10); parseInt(this._AnsiParams.shift(), 10); this.onescQ.trigger(a.toString(10)); break; case "r": 0 === this._AnsiIntermediates.length ? console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" +
            this._AnsiIntermediates.toString() + ") FB(" + b + ")") : -1 !== this._AnsiIntermediates[0].indexOf("*") ? console.log("Unhandled ESC sequence: Set the output emulation speed.") : -1 !== this._AnsiIntermediates[0].indexOf("]") ? console.log("Unhandled ESC sequence: Set Top and Bottom Margins") : console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" + b + ")"); break; case "S": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(),
            10)); Crt.ScrollUpScreen(d); break; case "s": 0 === this._AnsiIntermediates.length ? this._AnsiXY = new Point(Crt.WhereX(), Crt.WhereY()) : console.log("Unhandled ESC sequence: Save Mode Setting"); break; case "T": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); d = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.ScrollDownWindow(d); break; case "U": console.log("Unhandled ESC sequence: Clear screen with default attribute"); break; case "u": 0 === this._AnsiIntermediates.length ? Crt.GotoXY(this._AnsiXY.x, this._AnsiXY.y) :
            console.log("Unhandled ESC sequence: Restore Mode Setting"); break; case "X": 1 > this._AnsiParams.length && this._AnsiParams.push("1"); a = Math.max(1, parseInt(this._AnsiParams.shift(), 10)); Crt.DelChar(a); break; case "Z": console.log("Unhandled ESC sequnce: Cursor Backward Tabulation"); break; default: console.log("Unknown ESC sequence: PB(" + this._AnsiParams.toString() + ") IB(" + this._AnsiIntermediates.toString() + ") FB(" + b + ")")
        }
    }; a.ClrBol = function () { return "\u001b[1K" }; a.ClrBos = function () { return "\u001b[1J" }; a.ClrEol =
    function () { return "\u001b[K" }; a.ClrEos = function () { return "\u001b[J" }; a.ClrLine = function () { return "\u001b[2K" }; a.ClrScr = function () { return "\u001b[2J" }; a.CursorDown = function (b) { return 1 === b ? "\u001b[B" : "\u001b[" + b.toString() + "B" }; a.CursorLeft = function (b) { return 1 === b ? "\u001b[D" : "\u001b[" + b.toString() + "D" }; a.CursorPosition = function (b, a) { "undefined" === typeof b && (b = Crt.WhereXA()); "undefined" === typeof a && (a = Crt.WhereYA()); return "\u001b[" + a + ";" + b + "R" }; a.CursorRestore = function () { return "\u001b[u" }; a.CursorRight =
    function (b) { return 1 === b ? "\u001b[C" : "\u001b[" + b.toString() + "C" }; a.CursorSave = function () { return "\u001b[s" }; a.CursorUp = function (b) { return 1 === b ? "\u001b[A" : "\u001b[" + b.toString() + "A" }; a.GotoX = function (b) { return 1 === b ? this.CursorLeft(255) : this.CursorLeft(255) + this.CursorRight(b - 1) }; a.GotoXY = function (b, a) { return "\u001b[" + a.toString() + ";" + b.toString() + "H" }; a.GotoY = function (b) { return 1 === b ? this.CursorUp(255) : this.CursorUp(255) + this.CursorDown(b - 1) }; a.TextAttr = function (b) {
        return this.TextColor(b % 16) + this.TextBackground(Math.floor(b /
        16))
    }; a.TextBackground = function (b) { for (; 8 <= b;) b -= 8; return "\u001b[" + (40 + this.ANSI_COLORS[b]).toString() + "m" }; a.TextColor = function (b) { switch (b % 16) { case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: return "\u001b[0;" + (30 + this.ANSI_COLORS[b % 16]).toString() + "m" + this.TextBackground(Crt.TextAttr / 16); case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: return "\u001b[1;" + (30 + this.ANSI_COLORS[b % 16 - 8]).toString() + "m" } return "" }; a.Write = function (b) {
        if (Crt.Atari || Crt.C64) Crt.Write(b); else {
            for (var a =
            "", d = 0; d < b.length; d++) if ("\u001b" === b.charAt(d)) this._AnsiParserState = 1; else if (1 === this._AnsiParserState) if ("[" === b.charAt(d)) { this._AnsiParserState = 2; for (this._AnsiBuffer = ""; 0 < this._AnsiParams.length;) this._AnsiParams.pop(); for (; 0 < this._AnsiIntermediates.length;) this._AnsiIntermediates.pop() } else a += b.charAt(d), this._AnsiParserState = 0; else 2 === this._AnsiParserState ? "0" <= b.charAt(d) && "?" >= b.charAt(d) ? (this._AnsiBuffer += b.charAt(d), this._AnsiParserState = 3) : " " <= b.charAt(d) && "/" >= b.charAt(d) ? (this._AnsiBuffer +=
            b.charAt(d), this._AnsiParserState = 4) : ("@" <= b.charAt(d) && "~" >= b.charAt(d) ? (Crt.Write(a), a = "", this.AnsiCommand(b.charAt(d))) : a += b.charAt(d), this._AnsiParserState = 0) : 3 === this._AnsiParserState ? ";" === b.charAt(d) ? (this._AnsiParams.push("" === this._AnsiBuffer ? "0" : this._AnsiBuffer), this._AnsiBuffer = "") : "0" <= b.charAt(d) && "?" >= b.charAt(d) ? this._AnsiBuffer += b.charAt(d) : " " <= b.charAt(d) && "/" >= b.charAt(d) ? (this._AnsiParams.push("" === this._AnsiBuffer ? "0" : this._AnsiBuffer), this._AnsiBuffer = "", this._AnsiIntermediates.push(b.charAt(d)),
            this._AnsiParserState = 4) : ("@" <= b.charAt(d) && "~" >= b.charAt(d) ? (this._AnsiParams.push("" === this._AnsiBuffer ? "0" : this._AnsiBuffer), this._AnsiBuffer = "", Crt.Write(a), a = "", this.AnsiCommand(b.charAt(d))) : a += b.charAt(d), this._AnsiParserState = 0) : 4 === this._AnsiParserState ? "0" <= b.charAt(d) && "?" >= b.charAt(d) ? (a += b.charAt(d), this._AnsiParserState = 0) : " " <= b.charAt(d) && "/" >= b.charAt(d) ? this._AnsiIntermediates.push(b.charAt(d)) : ("@" <= b.charAt(d) && "~" >= b.charAt(d) ? (Crt.Write(a), a = "", this.AnsiCommand(b.charAt(d))) :
            a += b.charAt(d), this._AnsiParserState = 0) : a += b.charAt(d); Crt.Write(a)
        }
    }; a.WriteLn = function (b) { this.Write(b + "\r\n") }; a.onesc5n = new TypedEvent; a.onesc6n = new TypedEvent; a.onesc255n = new TypedEvent; a.onescQ = new TypedEvent; a.onripdetect = new TypedEvent; a.onripdisable = new TypedEvent; a.onripenable = new TypedEvent; a.ANSI_COLORS = [0, 4, 2, 6, 1, 5, 3, 7]; a._AnsiAttr = 7; a._AnsiBuffer = ""; a._AnsiIntermediates = []; a._AnsiParams = []; a._AnsiParserState = 0; a._AnsiXY = new Point(1, 1); return a
}(), AnsiParserState;
(function (a) { a[a.None = 0] = "None"; a[a.Escape = 1] = "Escape"; a[a.Bracket = 2] = "Bracket"; a[a.ParameterByte = 3] = "ParameterByte"; a[a.IntermediateByte = 4] = "IntermediateByte" })(AnsiParserState || (AnsiParserState = {})); var CharInfo = function () { return function (a, b, c, d, e) { "undefined" === typeof c && (c = !1); "undefined" === typeof d && (d = !1); "undefined" === typeof e && (e = !1); this.Ch = a; this.Attr = b; this.Blink = c; this.Underline = d; this.Reverse = e } }(), BorderStyle;
(function (a) { a[a.Single = 0] = "Single"; a[a.Double = 1] = "Double"; a[a.SingleH = 2] = "SingleH"; a[a.SingleV = 3] = "SingleV"; a[a.DoubleH = 4] = "DoubleH"; a[a.DoubleV = 5] = "DoubleV" })(BorderStyle || (BorderStyle = {})); var ContentAlignment;
(function (a) { a[a.BottomLeft = 0] = "BottomLeft"; a[a.BottomCenter = 1] = "BottomCenter"; a[a.BottomRight = 2] = "BottomRight"; a[a.MiddleLeft = 3] = "MiddleLeft"; a[a.MiddleCenter = 4] = "MiddleCenter"; a[a.MiddleRight = 5] = "MiddleRight"; a[a.TopLeft = 6] = "TopLeft"; a[a.TopCenter = 7] = "TopCenter"; a[a.TopRight = 8] = "TopRight"; a[a.Left = 9] = "Left"; a[a.Center = 10] = "Center"; a[a.Right = 11] = "Right" })(ContentAlignment || (ContentAlignment = {}));
var CrtControl = function () {
    function a(b, a, d, e, f) { this._BackColour = Crt.BLACK; this._Background = null; this._Controls = []; this._ForeColour = Crt.LIGHTGRAY; this._Parent = null; this._Parent = b; this._Left = a; this._Top = d; this._Width = e; this._Height = f; this.SaveBackground(); null !== this._Parent && b.AddControl(this) } a.prototype.AddControl = function (b) { this._Controls.push(b) }; Object.defineProperty(a.prototype, "BackColour", {
        get: function () { return this._BackColour }, set: function (b) { b !== this._BackColour && (this._BackColour = b, this.Paint(!0)) },
        enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "ForeColour", { get: function () { return this._ForeColour }, set: function (b) { b !== this._ForeColour && (this._ForeColour = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype, "Height", { get: function () { return this._Height }, set: function (b) { b !== this._Height && (this.RestoreBackground(), this._Height = b, this.SaveBackground(), this.Paint(!0)) }, enumerable: !0, configurable: !0 }); a.prototype.Hide = function () { this.RestoreBackground() };
    Object.defineProperty(a.prototype, "Left", { get: function () { return this._Left }, set: function (b) { if (b !== this._Left) for (this.RestoreBackground(), this._Left = b, this.SaveBackground(), this.Paint(!0), b = 0; b < this._Controls.length; b++) this._Controls[b].Paint(!0) }, enumerable: !0, configurable: !0 }); a.prototype.Paint = function (b) { }; Object.defineProperty(a.prototype, "Parent", {
        get: function () { return this._Parent }, set: function (b) { this.RestoreBackground(); this._Parent = b; this.SaveBackground(); this.Paint(!0) }, enumerable: !0,
        configurable: !0
    }); a.prototype.RestoreBackground = function () { for (var b = this._Left, a = this._Top, d = this._Parent; d;) b += d.Left, a += d.Top, d = d.Parent; Crt.RestoreScreen(this._Background, b, a, b + this._Width - 1, a + this._Height - 1) }; a.prototype.SaveBackground = function () { for (var b = this._Left, a = this._Top, d = this._Parent; d;) b += d.Left, a += d.Top, d = d.Parent; this._Background = Crt.SaveScreen(b, a, b + this._Width - 1, a + this._Height - 1) }; Object.defineProperty(a.prototype, "ScreenLeft", {
        get: function () {
            return this._Left + (null === this._Parent ?
            0 : this._Parent.Left)
        }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "ScreenTop", { get: function () { return this._Top + (null === this._Parent ? 0 : this._Parent.Top) }, enumerable: !0, configurable: !0 }); a.prototype.Show = function () { this.Paint(!0); for (var b = 0; b < this._Controls.length; b++) this._Controls[b].Paint(!0) }; Object.defineProperty(a.prototype, "Top", {
        get: function () { return this._Top }, set: function (b) {
            if (b !== this._Top) for (this.RestoreBackground(), this._Top = b, this.SaveBackground(), this.Paint(!0),
            b = 0; b < this._Controls.length; b++) this._Controls[b].Paint(!0)
        }, enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "Width", { get: function () { return this._Width }, set: function (b) { b !== this._Width && (this.RestoreBackground(), this._Width = b, this.SaveBackground(), this.Paint(!0)) }, enumerable: !0, configurable: !0 }); return a
}(), __extends = this.__extends || function (a, b) { function c() { this.constructor = a } for (var d in b) b.hasOwnProperty(d) && (a[d] = b[d]); c.prototype = b.prototype; a.prototype = new c }, CrtLabel = function (a) {
    function b(b,
    d, e, f, g, h, k, l) { a.call(this, b, d, e, f, 1); this._Text = g; this._TextAlign = h; this.ForeColour = k; this.BackColour = l; this.Paint(!0) } __extends(b, a); b.prototype.Paint = function (b) {
        b = this._Text.replace("\r\n", "\n").split("\n"); for (var a = 0; a < b.length && a !== this.Height; a++) switch (this._TextAlign) {
            case 10: if (b[a].length >= this.Width) Crt.FastWrite(b[a].substring(0, this.Width), this.ScreenLeft, this.ScreenTop + a, new CharInfo(" ", this.ForeColour + (this.BackColour << 4))); else {
                for (var e = "", a = 0; a < Math.floor((this.Width - b[a].length) /
                2) ; a++) e += " "; for (var f = "", a = 0; a < this.Width - b[a].length - e.length; a++) f += " "; Crt.FastWrite(e + b[a] + f, this.ScreenLeft, this.ScreenTop + a, new CharInfo(" ", this.ForeColour + (this.BackColour << 4)))
            } break; case 9: Crt.FastWrite(StringUtils.PadRight(b[a], " ", this.Width), this.ScreenLeft, this.ScreenTop + a, new CharInfo(" ", this.ForeColour + (this.BackColour << 4))); break; case 11: Crt.FastWrite(StringUtils.PadLeft(b[a], " ", this.Width), this.ScreenLeft, this.ScreenTop + a, new CharInfo(" ", this.ForeColour + (this.BackColour << 4)))
        }
    };
    Object.defineProperty(b.prototype, "Text", { get: function () { return this._Text }, set: function (b) { this._Text = b; this.Paint(!0) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "TextAlign", { get: function () { return this._TextAlign }, set: function (b) { b !== this._TextAlign && (this._TextAlign = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); return b
}(CrtControl), CrtPanel = function (a) {
    function b(b, d, e, f, g, h, k, l, m, p) {
        a.call(this, b, d, e, f, g); this._Border = h; this._Text = m; this._TextAlign = p; this.ForeColour =
        k; this.BackColour = l; this.Paint(!0)
    } __extends(b, a); Object.defineProperty(b.prototype, "Border", { get: function () { return this._Border }, set: function (b) { b !== this._Border && (this._Border = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); b.prototype.Paint = function (b) {
        var a, e, f, g, h, k; switch (this._Border) {
            case 0: a = String.fromCharCode(218); e = String.fromCharCode(191); f = String.fromCharCode(192); g = String.fromCharCode(217); h = String.fromCharCode(196); k = String.fromCharCode(179); break; case 1: a = String.fromCharCode(201);
                e = String.fromCharCode(187); f = String.fromCharCode(200); g = String.fromCharCode(188); h = String.fromCharCode(205); k = String.fromCharCode(186); break; case 4: case 3: a = String.fromCharCode(213); e = String.fromCharCode(184); f = String.fromCharCode(212); g = String.fromCharCode(190); h = String.fromCharCode(205); k = String.fromCharCode(179); break; case 5: case 2: a = String.fromCharCode(214), e = String.fromCharCode(183), f = String.fromCharCode(211), g = String.fromCharCode(189), h = String.fromCharCode(196), k = String.fromCharCode(186)
        } Crt.FastWrite(a +
        StringUtils.NewString(h, this.Width - 2) + e, this.ScreenLeft, this.ScreenTop, new CharInfo(" ", this.ForeColour + (this.BackColour << 4))); for (b = this.ScreenTop + 1; b < this.ScreenTop + this.Height - 1; b++) Crt.FastWrite(k + StringUtils.NewString(" ", this.Width - 2) + k, this.ScreenLeft, b, new CharInfo(" ", this.ForeColour + (this.BackColour << 4))); Crt.FastWrite(f + StringUtils.NewString(h, this.Width - 2) + g, this.ScreenLeft, this.ScreenTop + this.Height - 1, new CharInfo(" ", this.ForeColour + (this.BackColour << 4))); if (0 < StringUtils.Trim(this._Text).length) {
            g =
            f = 0; h = " " + StringUtils.Trim(this._Text) + " "; switch (this._TextAlign) { case 0: case 3: case 6: f = this.ScreenLeft + 2; break; case 1: case 4: case 7: f = this.ScreenLeft + Math.round((this.Width - h.length) / 2); break; case 2: case 5: case 8: f = this.ScreenLeft + this.Width - h.length - 2 } switch (this._TextAlign) { case 1: case 0: case 2: g = this.ScreenTop + this.Height - 1; break; case 4: case 3: case 5: case 7: case 6: case 8: g = this.ScreenTop } Crt.FastWrite(h, f, g, new CharInfo(" ", this.ForeColour + (this.BackColour << 4)))
        }
    }; Object.defineProperty(b.prototype,
    "Text", { get: function () { return this._Text }, set: function (b) { this._Text = b; this.Paint(!0) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "TextAlign", { get: function () { return this._TextAlign }, set: function (b) { b !== this._TextAlign && (this._TextAlign = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); return b
}(CrtControl), CrtProgressBar = function (a) {
    function b(b, d, e, f, g) {
        a.call(this, b, d, e, f, 1); this._LastBarWidth = 9999; this._LastMarqueeUpdate = 0; this._LastPercentText = ""; this._Style = g; this.BackColour =
        Crt.BLUE; this._BarForeColour = Crt.YELLOW; this._BlankForeColour = Crt.LIGHTGRAY; this._LastMarqueeUpdate = (new Date).getTime(); this._MarqueeAnimationSpeed = 25; this._Maximum = 100; this._PercentPrecision = 2; this._PercentVisible = !0; this._Value = 0; this.Paint(!0)
    } __extends(b, a); Object.defineProperty(b.prototype, "BarForeColour", { get: function () { return this._BarForeColour }, set: function (b) { b !== this._BarForeColour && (this._BarForeColour = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype,
    "BlankForeColour", { get: function () { return this._BlankForeColour }, set: function (b) { b !== this._BlankForeColour && (this._BlankForeColour = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "MarqueeAnimationSpeed", { get: function () { return this._MarqueeAnimationSpeed }, set: function (b) { this._MarqueeAnimationSpeed = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "Maximum", {
        get: function () { return this._Maximum }, set: function (b) {
            b !== this._Maximum && (this._Maximum =
            b, this._Value > this._Maximum && (this._Value = this._Maximum), this.Paint(!0))
        }, enumerable: !0, configurable: !0
    }); b.prototype.Paint = function (b) {
        if (0 === this._Style) b && Crt.FastWrite(StringUtils.NewString(String.fromCharCode(176), this.Width), this.ScreenLeft, this.ScreenTop, new CharInfo(" ", this._BlankForeColour + (this.BackColour << 4))), 0 < this._Value && (this._Value > this.Width ? Crt.FastWrite(String.fromCharCode(176), this.ScreenLeft + this.Width - (15 - Math.floor(this._Value - this.Width)), this.ScreenTop, new CharInfo(" ",
        this._BlankForeColour + (this.BackColour << 4))) : 15 <= this._Value ? (Crt.FastWrite(StringUtils.NewString(String.fromCharCode(219), Math.min(this._Value, 15)), this.ScreenLeft + this._Value - 15, this.ScreenTop, new CharInfo(" ", this._BarForeColour + (this.BackColour << 4))), Crt.FastWrite(String.fromCharCode(176), this.ScreenLeft + this._Value - 15, this.ScreenTop, new CharInfo(" ", this._BlankForeColour + (this.BackColour << 4)))) : Crt.FastWrite(StringUtils.NewString(String.fromCharCode(219), Math.min(this._Value, 15)), this.ScreenLeft,
        this.ScreenTop, new CharInfo(" ", this._BarForeColour + (this.BackColour << 4)))); else {
            b && (this._LastBarWidth = 9999, this._LastPercentText = ""); var a = !1, e = this._Value / this._Maximum; b = Math.floor(e * this.Width); b !== this._LastBarWidth && (b < this._LastBarWidth && Crt.FastWrite(StringUtils.NewString(String.fromCharCode(176), this.Width), this.ScreenLeft, this.ScreenTop, new CharInfo(" ", this._BlankForeColour + (this.BackColour << 4))), Crt.FastWrite(StringUtils.NewString(String.fromCharCode(this._Style), b), this.ScreenLeft, this.ScreenTop,
            new CharInfo(" ", this._BarForeColour + (this.BackColour << 4))), this._LastBarWidth = b, a = !0); if (this._PercentVisible && (e = StringUtils.FormatPercent(e, this._PercentPrecision), e !== this._LastPercentText || a)) if (this._LastPercentText = e, a = Math.round((this.Width - e.length) / 2), a >= b) Crt.FastWrite(e, this.ScreenLeft + a, this.ScreenTop, new CharInfo(" ", this._BlankForeColour + (this.BackColour << 4))); else if (a + e.length <= b) Crt.FastWrite(e, this.ScreenLeft + a, this.ScreenTop, new CharInfo(" ", this.BackColour + (this._BarForeColour <<
            4))); else for (var f = 0; f < e.length; f++) { var g = a + f, h = g >= b ? this._BlankForeColour : this.BackColour, k = g >= b ? this.BackColour : this._BarForeColour; Crt.FastWrite(e.charAt(f), this.ScreenLeft + g, this.ScreenTop, new CharInfo(" ", h + (k << 4))) }
        }
    }; Object.defineProperty(b.prototype, "PercentPrecision", { get: function () { return this._PercentPrecision }, set: function (b) { b !== this._PercentPrecision && (this._PercentPrecision = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "PercentVisible", {
        get: function () { return this._PercentVisible },
        set: function (b) { b !== this._PercentVisible && (this._PercentVisible = b, this.Paint(!0)) }, enumerable: !0, configurable: !0
    }); b.prototype.Step = function () { this.StepBy(1) }; b.prototype.StepBy = function (b) { this.Value += b }; Object.defineProperty(b.prototype, "Style", { get: function () { return this._Style }, set: function (b) { b !== this._Style && (this._Style = b, this.Paint(!0)) }, enumerable: !0, configurable: !0 }); Object.defineProperty(b.prototype, "Value", {
        get: function () { return this._Value }, set: function (b) {
            b !== this._Value && (0 === this._Style ?
            (new Date).getTime() - this._LastMarqueeUpdate >= this._MarqueeAnimationSpeed && (0 > b && (b = 0), b >= this.Width + 15 && (b = 0), this._Value = b, this.Paint(!1), this._LastMarqueeUpdate = (new Date).getTime()) : (this._Value = Math.max(0, Math.min(b, this._Maximum)), this.Paint(!1)))
        }, enumerable: !0, configurable: !0
    }); return b
}(CrtControl), ProgressBarStyle; (function (a) { a[a.Blocks = 254] = "Blocks"; a[a.Continuous = 219] = "Continuous"; a[a.Marquee = 0] = "Marquee" })(ProgressBarStyle || (ProgressBarStyle = {}));
var Crt = function () {
    function a() { } a.Init = function (b) {
        var a = this; this._Container = b; this._Font = new CrtFont; this._Font.onchange.on(function () { a.OnFontChanged() }); this._Canvas = document.createElement("canvas"); this._Canvas.id = "fTelnetCanvas"; this._Canvas.innerHTML = 'Your browser does not support the HTML5 Canvas element!<br>The latest version of every major web browser supports this element, so please consider upgrading now:<ul><li><a href="http://www.mozilla.com/firefox/">Mozilla Firefox</a></li><li><a href="http://www.google.com/chrome">Google Chrome</a></li><li><a href="http://www.apple.com/safari/">Apple Safari</a></li><li><a href="http://www.opera.com/">Opera</a></li><li><a href="http://windows.microsoft.com/en-US/internet-explorer/products/ie/home">MS Internet Explorer</a></li></ul>';
        this._Canvas.width = this._Font.Width * this._ScreenSize.x; this._Canvas.height = this._Font.Height * this._ScreenSize.y; if (!this._Canvas.getContext) return console.log("fTelnet Error: Canvas not supported"), !1; this._Container.appendChild(this._Canvas); window.addEventListener("keydown", function (b) { a.OnKeyDown(b) }, !1); window.addEventListener("keypress", function (b) { a.OnKeyPress(b) }, !1); window.addEventListener("resize", function () { a.OnResize() }, !1); this.InitBuffers(!0); this._Cursor = new Cursor(this._Container, CrtFont.ANSI_COLOURS[this.LIGHTGRAY],
        this._Font.Size); this._Cursor.onhide.on(function () { a.OnBlinkHide() }); this._Cursor.onshow.on(function () { a.OnBlinkShow() }); this._WindMin = 0; this._WindMax = this._ScreenSize.x - 1 | this._ScreenSize.y - 1 << 8; this._CanvasContext = this._Canvas.getContext("2d"); this._CanvasContext.font = "12pt monospace"; this._CanvasContext.textBaseline = "top"; this.ClrScr(); return !0
    }; Object.defineProperty(a, "Atari", { get: function () { return this._Atari }, set: function (b) { this._Atari = b }, enumerable: !0, configurable: !0 }); a.Beep = function () { };
    Object.defineProperty(a, "Blink", { get: function () { return this._Blink }, set: function (b) { this._Blink = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "BareLFtoCRLF", { get: function () { return this._BareLFtoCRLF }, set: function (b) { this._BareLFtoCRLF = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "C64", { get: function () { return this._C64 }, set: function (b) { this._C64 = b }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "Canvas", { get: function () { return this._Canvas }, enumerable: !0, configurable: !0 });
    a.ClrBol = function () { this.FastWrite(StringUtils.NewString(" ", this.WhereX()), this.WindMinX + 1, this.WhereYA(), this._CharInfo) }; a.ClrBos = function () { this.ScrollUpWindow(this.WhereY() - 1); this.ScrollDownWindow(this.WhereY() - 1); this.ClrBol() }; a.ClrEol = function () { this.FastWrite(StringUtils.NewString(" ", this.WindMaxX + 1 - this.WhereX() + 1), this.WhereXA(), this.WhereYA(), this._CharInfo) }; a.ClrEos = function () { this.ScrollDownWindow(this.WindRows - this.WhereY()); this.ScrollUpWindow(this.WindRows - this.WhereY()); this.ClrEol() };
    a.ClrLine = function () { this.FastWrite(StringUtils.NewString(" ", this.WindCols), this.WindMinX + 1, this.WhereYA(), this._CharInfo) }; a.ClrScr = function () { this.ScrollUpWindow(this.WindRows); this.GotoXY(1, 1) }; a.Conceal = function () { this.TextColor((this.TextAttr & 240) >> 4) }; Object.defineProperty(a, "Cursor", { get: function () { return this._Cursor }, enumerable: !0, configurable: !0 }); a.DelChar = function (b) {
        "undefined" === typeof b && (b = 1); var a; for (a = this.WhereXA() ; a <= this.WindMinX + this.WindCols - b; a++) this.FastWrite(this._Buffer[this.WhereYA()][a +
        b].Ch, a, this.WhereYA(), this._Buffer[this.WhereYA()][a + b]); for (a = this.WindMinX + this.WindCols + 1 - b; a <= this.WindMinX + this.WindCols; a++) this.FastWrite(" ", a, this.WhereYA(), this._CharInfo)
    }; a.DelLine = function (b) { "undefined" === typeof b && (b = 1); this.ScrollUpCustom(this.WindMinX + 1, this.WhereYA(), this.WindMaxX + 1, this.WindMaxY + 1, b, this._CharInfo) }; a.EnterScrollBack = function () {
        if (!this._InScrollBack) {
            this._InScrollBack = !0; var b, a, d; this._ScrollBackTemp = []; for (d = 0; d < this._ScrollBack.length; d++) {
                b = []; for (a = 0; a <
                this._ScrollBack[d].length; a++) b.push(new CharInfo(this._ScrollBack[d][a].Ch, this._ScrollBack[d][a].Attr, this._ScrollBack[d][a].Blink, this._ScrollBack[d][a].Underline, this._ScrollBack[d][a].Reverse)); this._ScrollBackTemp.push(b)
            } for (d = 1; d <= this._ScreenSize.y; d++) { b = []; for (a = 1; a <= this._ScreenSize.x; a++) b.push(new CharInfo(this._Buffer[d][a].Ch, this._Buffer[d][a].Attr, this._Buffer[d][a].Blink, this._Buffer[d][a].Underline, this._Buffer[d][a].Reverse)); this._ScrollBackTemp.push(b) } this._ScrollBackPosition =
            this._ScrollBackTemp.length
        }
    }; a.FastWrite = function (b, a, d, e, f) {
        "undefined" === typeof f && (f = !0); if (a <= this._ScreenSize.x && d <= this._ScreenSize.y) for (var g = 0; g < b.length; g++) {
            var h = this._Font.GetChar(b.charCodeAt(g), e); h && (!this._InScrollBack || this._InScrollBack && !f) && this._CanvasContext.putImageData(h, (a - 1 + g) * this._Font.Width, (d - 1) * this._Font.Height); f && (this._Buffer[d][a + g].Ch = b.charAt(g), this._Buffer[d][a + g].Attr = e.Attr, this._Buffer[d][a + g].Blink = e.Blink, this._Buffer[d][a + g].Underline = e.Underline, this._Buffer[d][a +
            g].Reverse = e.Reverse); if (a + g >= this._ScreenSize.x) break
        }
    }; a.FillScreen = function (b) { b = StringUtils.NewString(b.charAt(0), this.ScreenCols); for (var a = 1; a <= this.ScreenRows; a++) this.FastWrite(b, 1, a, this._CharInfo) }; Object.defineProperty(a, "Font", { get: function () { return this._Font }, enumerable: !0, configurable: !0 }); a.GeCharInfo = function () { return this._CharInfo }; a.GotoXY = function (b, a) { 1 <= b && 1 <= a && b - 1 + this.WindMinX <= this.WindMaxX && a - 1 + this.WindMinY <= this.WindMaxY && (this._Cursor.Position = new Point(b, a)) }; a.HideCursor =
    function () { this._Cursor.Visible = !1 }; a.HighVideo = function () { this.TextAttr |= 8 }; a.InitBuffers = function (b) { this._Buffer = []; for (var a = 1; a <= this._ScreenSize.y; a++) { this._Buffer[a] = []; for (var d = 1; d <= this._ScreenSize.x; d++) this._Buffer[a][d] = new CharInfo(" ", this.LIGHTGRAY, !1, !1, !1) } b && (this._ScrollBack = []) }; a.InsChar = function (b) {
        "undefined" === typeof b && (b = 1); var a; for (a = this.WindMinX + this.WindCols; a >= this.WhereXA() + b; a--) this.FastWrite(this._Buffer[this.WhereYA()][a - b].Ch, a, this.WhereYA(), this._Buffer[this.WhereYA()][a -
        b]); for (a = this.WhereXA() ; a < this.WhereXA() + b; a++) this.FastWrite(" ", a, this.WhereYA(), this._CharInfo)
    }; a.InsLine = function (b) { "undefined" === typeof b && (b = 1); this.ScrollDownCustom(this.WindMinX + 1, this.WhereYA(), this.WindMaxX + 1, this.WindMaxY + 1, b, this._CharInfo) }; a.KeyPressed = function () { return 0 < this._KeyBuf.length }; Object.defineProperty(a, "LocalEcho", { set: function (b) { this._LocalEcho = b }, enumerable: !0, configurable: !0 }); a.LowVideo = function () { this.TextAttr &= 247 }; a.NormVideo = function () {
        this._CharInfo.Attr = this._C64 ?
        this.PETSCII_WHITE : this.LIGHTGRAY; this._CharInfo.Blink = !1; this._CharInfo.Underline = !1; this._CharInfo.Reverse = !1
    }; a.OnBlinkHide = function () { if (this._Blink) { this._BlinkHidden = !0; for (var b = 1; b <= this._ScreenSize.y; b++) for (var a = 1; a <= this._ScreenSize.x; a++) this._Buffer[b][a].Blink && " " !== this._Buffer[b][a].Ch && this.FastWrite(" ", a, b, this._Buffer[b][a], !1) } }; a.OnBlinkShow = function () {
        if (this._Blink || this._BlinkHidden) {
            this._BlinkHidden = !1; for (var b = 1; b <= this._ScreenSize.y; b++) for (var a = 1; a <= this._ScreenSize.x; a++) this._Buffer[b][a].Blink &&
            " " !== this._Buffer[b][a].Ch && this.FastWrite(this._Buffer[b][a].Ch, a, b, this._Buffer[b][a], !1)
        } this._Cursor.WindowOffset = Offset.getOffset(this._Canvas)
    }; a.OnFontChanged = function () { this._Cursor.Size = this._Font.Size; this._Canvas.height = this._Font.Height * this._ScreenSize.y; this._Canvas.width = this._Font.Width * this._ScreenSize.x; if (null !== this._Buffer) for (var b = 1; b <= this._ScreenSize.y; b++) for (var a = 1; a <= this._ScreenSize.x; a++) this.FastWrite(this._Buffer[b][a].Ch, a, b, this._Buffer[b][a], !1); this.onfontchange.trigger() };
    a.OnKeyDown = function (b) {
        if (!(b.target instanceof HTMLInputElement || b.target instanceof HTMLTextAreaElement)) if (this._InScrollBack) {
            var a, d, e, f; if (40 === b.keyCode) {
                if (this._ScrollBackPosition < this._ScrollBackTemp.length) for (this._ScrollBackPosition += 1, this.ScrollUpCustom(1, 1, this._ScreenSize.x, this._ScreenSize.y, 1, new CharInfo(" ", 7, !1, !1, !1), !1), e = this._ScreenSize.y, f = this._ScrollBackPosition - 1, d = Math.min(this._ScreenSize.x, this._ScrollBackTemp[f].length), a = 0; a < d; a++) this.FastWrite(this._ScrollBackTemp[f][a].Ch,
                a + 1, e, this._ScrollBackTemp[f][a], !1)
            } else if (27 === b.keyCode) { if (null !== this._Buffer) for (d = 1; d <= this._ScreenSize.y; d++) for (a = 1; a <= this._ScreenSize.x; a++) this.FastWrite(this._Buffer[d][a].Ch, a, d, this._Buffer[d][a], !1); this._InScrollBack = !1 } else if (34 === b.keyCode) for (a = 0; a < this._ScreenSize.y; a++) this.PushKeyDown(40, 40, !1, !1, !1); else if (33 === b.keyCode) for (a = 0; a < this._ScreenSize.y; a++) this.PushKeyDown(38, 38, !1, !1, !1); else if (38 === b.keyCode && this._ScrollBackPosition > this._ScreenSize.y) for (--this._ScrollBackPosition,
            this.ScrollDownCustom(1, 1, this._ScreenSize.x, this._ScreenSize.y, 1, new CharInfo(" ", 7, !1, !1), !1), e = 1, f = this._ScrollBackPosition - this._ScreenSize.y, d = Math.min(this._ScreenSize.x, this._ScrollBackTemp[f].length), a = 0; a < d; a++) this.FastWrite(this._ScrollBackTemp[f][a].Ch, a + 1, e, this._ScrollBackTemp[f][a], !1); b.preventDefault()
        } else {
            a = ""; if (this._Atari) if (b.ctrlKey) if (65 <= b.keyCode && 90 >= b.keyCode) switch (b.keyCode) {
                case 72: a = String.fromCharCode(126); break; case 74: a = String.fromCharCode(13); break; case 77: a = String.fromCharCode(155);
                    break; default: a = String.fromCharCode(b.keyCode - 64)
            } else { if (97 <= b.keyCode && 122 >= b.keyCode) switch (b.keyCode) { case 104: a = String.fromCharCode(126); break; case 106: a = String.fromCharCode(13); break; case 109: a = String.fromCharCode(155); break; default: a = String.fromCharCode(b.keyCode - 96) } } else switch (b.keyCode) { case 8: a = "~"; break; case 46: a = "~"; break; case 40: a = "\u001d"; break; case 13: a = "\u009b"; break; case 37: a = "\u001e"; break; case 39: a = "\u001f"; break; case 32: a = " "; break; case 9: a = "\u007f"; break; case 38: a = "\u001c" } else if (this._C64) switch (b.keyCode) {
                case 8: a =
                "\u0014"; break; case 46: a = "\u0014"; break; case 40: a = "\u0011"; break; case 13: a = "\r"; break; case 112: a = "\u0085"; break; case 113: a = "\u0089"; break; case 114: a = "\u0086"; break; case 115: a = "\u008a"; break; case 116: a = "\u0087"; break; case 117: a = "\u008b"; break; case 118: a = "\u0088"; break; case 119: a = "\u008c"; break; case 36: a = "\u0013"; break; case 45: a = "\u0094"; break; case 37: a = "\u009d"; break; case 39: a = "\u001d"; break; case 32: a = " "; break; case 38: a = "\u0091"
            } else if (b.ctrlKey) 65 <= b.keyCode && 90 >= b.keyCode ? a = String.fromCharCode(b.keyCode -
            64) : 97 <= b.keyCode && 122 >= b.keyCode && (a = String.fromCharCode(b.keyCode - 96)); else switch (b.keyCode) {
                case 8: a = "\b"; break; case 46: a = "\u007f"; break; case 40: a = "\u001b[B"; break; case 35: a = "\u001b[K"; break; case 13: a = "\r\n"; break; case 27: a = "\u001b"; break; case 112: a = "\u001bOP"; break; case 113: a = "\u001bOQ"; break; case 114: a = "\u001bOR"; break; case 115: a = "\u001bOS"; break; case 116: a = "\u001bOt"; break; case 117: a = "\u001b[17~"; break; case 118: a = "\u001b[18~"; break; case 119: a = "\u001b[19~"; break; case 120: a = "\u001b[20~"; break;
                case 121: a = "\u001b[21~"; break; case 122: a = "\u001b[23~"; break; case 123: a = "\u001b[24~"; break; case 36: a = "\u001b[H"; break; case 45: a = "\u001b@"; break; case 37: a = "\u001b[D"; break; case 34: a = "\u001b[U"; break; case 33: a = "\u001b[V"; break; case 39: a = "\u001b[C"; break; case 32: a = " "; break; case 9: a = "\t"; break; case 38: a = "\u001b[A"
            } this._KeyBuf.push(new KeyPressEvent(b, a)); (a || b.ctrlKey) && b.preventDefault()
        }
    }; a.OnKeyPress = function (a) {
        if (!(a.target instanceof HTMLInputElement || a.target instanceof HTMLTextAreaElement || this._InScrollBack)) {
            var c =
            ""; if (!a.ctrlKey) { var d = null !== a.charCode ? a.charCode : a.which; this._Atari ? 33 <= d && 122 >= d && (c = String.fromCharCode(d)) : this._C64 ? 33 <= d && 64 >= d ? c = String.fromCharCode(d) : 65 <= d && 90 >= d ? c = String.fromCharCode(d).toLowerCase() : 91 <= d && 95 >= d ? c = String.fromCharCode(d) : 97 <= d && 122 >= d && (c = String.fromCharCode(d).toUpperCase()) : 33 <= d && 126 >= d && (c = String.fromCharCode(d)); this._KeyBuf.push(new KeyPressEvent(a, c)); c && a.preventDefault() }
        }
    }; a.OnResize = function () { a.SetFont(this._Font.Name) }; a.PushKeyDown = function (a, c, d, e, f) {
        this.OnKeyDown({
            altKey: e,
            charCode: a, ctrlKey: d, keyCode: c, shiftKey: f, preventDefault: function () { }
        })
    }; a.PushKeyPress = function (a, c, d, e, f) { this.OnKeyPress({ altKey: e, charCode: a, ctrlKey: d, keyCode: c, shiftKey: f, preventDefault: function () { } }) }; a.ReadKey = function () { if (0 === this._KeyBuf.length) return null; var a = this._KeyBuf.shift(); this._LocalEcho && this.Write(a.keyString); return a }; a.ReDraw = function () {
        for (var a = 1; a <= this._ScreenSize.y; a++) for (var c = 1; c <= this._ScreenSize.x; c++) this.FastWrite(this._Buffer[a][c].Ch, c, a, this._Buffer[a][c],
        !1)
    }; a.RestoreScreen = function (a, c, d, e, f) { f = f - d + 1; e = e - c + 1; for (var g = 0; g < f; g++) for (var h = 0; h < e; h++) this.FastWrite(a[g][h].Ch, h + c, g + d, a[g][h]) }; a.ReverseVideo = function () { this.TextAttr = (this.TextAttr & 240) >> 4 | (this.TextAttr & 15) << 4 }; a.SaveScreen = function (a, c, d, e) { e = e - c + 1; d = d - a + 1; for (var f = [], g = 0; g < e; g++) { f[g] = []; for (var h = 0; h < d; h++) f[g][h] = new CharInfo(this._Buffer[g + c][h + a].Ch, this._Buffer[g + c][h + a].Attr, this._Buffer[g + c][h + a].Blink, this._Buffer[g + c][h + a].Underline, this._Buffer[g + c][h + a].Reverse) } return f };
    Object.defineProperty(a, "ScreenCols", { get: function () { return this._ScreenSize.x }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "ScreenRows", { get: function () { return this._ScreenSize.y }, enumerable: !0, configurable: !0 }); a.ScrollDownCustom = function (a, c, d, e, f, g, h) {
        "undefined" === typeof h && (h = !0); var k = e - c + 1; f > k && (f = k); var k = (a - 1) * this._Font.Width, l = (c - 1) * this._Font.Height, m = (d - a + 1) * this._Font.Width, p = (e - c + 1 - f) * this._Font.Height; 0 < p && (m = this._CanvasContext.getImageData(k, l, m, p), k = (a - 1) * this._Font.Width,
        l = (c - 1 + f) * this._Font.Height, this._CanvasContext.putImageData(m, k, l)); this._CanvasContext.fillStyle = CrtFont.ANSI_COLOURS[(g.Attr & 240) >> 4]; k = (a - 1) * this._Font.Width; l = (c - 1) * this._Font.Height; m = (d - a + 1) * this._Font.Width; p = f * this._Font.Height; this._CanvasContext.fillRect(k, l, m, p); if (h) {
            k = h = 0; for (k = e; k > f; k--) for (h = a; h <= d; h++) this._Buffer[k][h].Ch = this._Buffer[k - f][h].Ch, this._Buffer[k][h].Attr = this._Buffer[k - f][h].Attr, this._Buffer[k][h].Blink = this._Buffer[k - f][h].Blink, this._Buffer[k][h].Underline = this._Buffer[k -
            f][h].Underline, this._Buffer[k][h].Reverse = this._Buffer[k - f][h].Reverse; for (k = c; k <= f; k++) for (h = a; h <= d; h++) this._Buffer[k][h].Ch = g.Ch, this._Buffer[k][h].Attr = g.Attr, this._Buffer[k][h].Blink = g.Blink, this._Buffer[k][h].Underline = g.Underline, this._Buffer[k][h].Reverse = g.Reverse
        }
    }; a.ScrollDownScreen = function (a) { this.ScrollDownCustom(1, 1, this._ScreenSize.x, this._ScreenSize.y, a, this._CharInfo) }; a.ScrollDownWindow = function (a) {
        this.ScrollDownCustom(this.WindMinX + 1, this.WindMinY + 1, this.WindMaxX + 1, this.WindMaxY +
        1, a, this._CharInfo)
    }; a.ScrollUpCustom = function (a, c, d, e, f, g, h) {
        "undefined" === typeof h && (h = !0); var k = e - c + 1; f > k && (f = k); if (!this._InScrollBack || this._InScrollBack && !h) {
            var k = (a - 1) * this._Font.Width, l = (c - 1 + f) * this._Font.Height, m = (d - a + 1) * this._Font.Width, p = (e - c + 1 - f) * this._Font.Height; 0 < p && (m = this._CanvasContext.getImageData(k, l, m, p), k = (a - 1) * this._Font.Width, l = (c - 1) * this._Font.Height, this._CanvasContext.putImageData(m, k, l)); this._CanvasContext.fillStyle = CrtFont.ANSI_COLOURS[(g.Attr & 240) >> 4]; k = (a - 1) * this._Font.Width;
            l = (e - f) * this._Font.Height; m = (d - a + 1) * this._Font.Width; p = f * this._Font.Height; this._CanvasContext.fillRect(k, l, m, p)
        } if (h) {
            for (l = 0; l < f; l++) { h = []; for (k = a; k <= d; k++) h.push(new CharInfo(this._Buffer[l + c][k].Ch, this._Buffer[l + c][k].Attr, this._Buffer[l + c][k].Blink, this._Buffer[l + c][k].Underline, this._Buffer[l + c][k].Reverse)); this._ScrollBack.push(h) } for (h = this._ScrollBack.length; h > this._ScrollBackSize - 2;) this._ScrollBack.shift(), --h; for (l = c; l <= e - f; l++) for (k = a; k <= d; k++) this._Buffer[l][k].Ch = this._Buffer[l + f][k].Ch,
            this._Buffer[l][k].Attr = this._Buffer[l + f][k].Attr, this._Buffer[l][k].Blink = this._Buffer[l + f][k].Blink, this._Buffer[l][k].Underline = this._Buffer[l + f][k].Underline, this._Buffer[l][k].Reverse = this._Buffer[l + f][k].Reverse; for (l = e; l > e - f; l--) for (k = a; k <= d; k++) this._Buffer[l][k].Ch = g.Ch, this._Buffer[l][k].Attr = g.Attr, this._Buffer[l][k].Blink = g.Blink, this._Buffer[l][k].Underline = g.Underline, this._Buffer[l][k].Reverse = g.Reverse
        }
    }; a.ScrollUpScreen = function (a) {
        this.ScrollUpCustom(1, 1, this._ScreenSize.x, this._ScreenSize.y,
        a, this._CharInfo)
    }; a.ScrollUpWindow = function (a) { this.ScrollUpCustom(this.WindMinX + 1, this.WindMinY + 1, this.WindMaxX + 1, this.WindMaxY + 1, a, this._CharInfo) }; a.SetBlink = function (a) { this._CharInfo.Blink = a }; a.SetBlinkRate = function (a) { this._Cursor.BlinkRate = a }; a.SetCharInfo = function (a) { this._CharInfo = new CharInfo(a.Ch, a.Attr, a.Blink, a.Underline, a.Reverse) }; a.SetFont = function (a) { return this._Font.Load(a, Math.floor(this._Container.clientWidth / this._ScreenSize.x), Math.floor(window.innerHeight / this._ScreenSize.y)) };
    a.SetScreenSize = function (a, c) {
        if (!this._InScrollBack && (a !== this._ScreenSize.x || c !== this._ScreenSize.y)) {
            var d = 0, e = 0, f; if (null !== this._Buffer) for (f = [], e = 1; e <= this._ScreenSize.y; e++) for (f[e] = [], d = 1; d <= this._ScreenSize.x; d++) f[e][d] = new CharInfo(this._Buffer[e][d].Ch, this._Buffer[e][d].Attr, this._Buffer[e][d].Blink, this._Buffer[e][d].Underline, this._Buffer[e][d].Reverse); var g = new Point(this._ScreenSize.x, this._ScreenSize.y); this._ScreenSize.x = a; this._ScreenSize.y = c; this._WindMin = 0; this._WindMax = this._ScreenSize.x -
            1 | this._ScreenSize.y - 1 << 8; this.InitBuffers(!1); if (null !== f) for (e = 1; e <= Math.min(this._ScreenSize.y, g.y) ; e++) for (d = 1; d <= Math.min(this._ScreenSize.x, g.x) ; d++) this.FastWrite(f[e][d].Ch, d, e, f[e][d]); this.onscreensizechange.trigger()
        }
    }; a.ShowCursor = function () { this._Cursor.Visible = !0 }; Object.defineProperty(a, "TextAttr", { get: function () { return this._CharInfo.Attr }, set: function (a) { this._CharInfo.Attr = a }, enumerable: !0, configurable: !0 }); a.TextBackground = function (a) { this.TextAttr = this.TextAttr & 15 | (a & 15) << 4 }; a.TextColor =
    function (a) { this.TextAttr = this.TextAttr & 240 | a & 15 }; a.WhereX = function () { return this._Cursor.Position.x }; a.WhereXA = function () { return this.WhereX() + this.WindMinX }; a.WhereY = function () { return this._Cursor.Position.y }; a.WhereYA = function () { return this.WhereY() + this.WindMinY }; Object.defineProperty(a, "WindCols", { get: function () { return this.WindMaxX - this.WindMinX + 1 }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "WindMax", { get: function () { return this._WindMax }, enumerable: !0, configurable: !0 }); Object.defineProperty(a,
    "WindMaxX", { get: function () { return this.WindMax & 255 }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "WindMaxY", { get: function () { return (this.WindMax & 65280) >> 8 }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "WindMin", { get: function () { return this._WindMin }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "WindMinX", { get: function () { return this.WindMin & 255 }, enumerable: !0, configurable: !0 }); Object.defineProperty(a, "WindMinY", {
        get: function () { return (this.WindMin & 65280) >> 8 }, enumerable: !0,
        configurable: !0
    }); a.Window = function (a, c, d, e) { 1 <= a && 1 <= c && a <= d && c <= e && d <= this._ScreenSize.x && e <= this._ScreenSize.y && (this._WindMin = a - 1 + (c - 1 << 8), this._WindMax = d - 1 + (e - 1 << 8), this._Cursor.WindowOffset = new Point(a - 1, c - 1), this.GotoXY(1, 1)) }; Object.defineProperty(a, "WindRows", { get: function () { return this.WindMaxY - this.WindMinY + 1 }, enumerable: !0, configurable: !0 }); a.Write = function (a) { this._Atari ? this.WriteATASCII(a) : this._C64 ? this.WritePETSCII(a) : this.WriteASCII(a) }; a.WriteASCII = function (a) {
        "undefined" === typeof a &&
        (a = ""); for (var c = this.WhereX(), d = this.WhereY(), e = "", f = 0; f < a.length; f++) {
            var g = !1; 0 === a.charCodeAt(f) ? f += 0 : 7 === a.charCodeAt(f) ? this.Beep() : 8 === a.charCodeAt(f) ? (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, 1 < c && --c, g = !0, e = "") : 9 === a.charCodeAt(f) ? (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, e = "", c === this.WindCols ? (c = 1, d += 1) : (c += 8 - c % 8, c = Math.min(c, this.WindCols)), g = !0) : 10 === a.charCodeAt(f) ? (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo),
            c = this._BareLFtoCRLF && 13 !== this._LastChar ? 1 : c + e.length, d += 1, g = !0, e = "") : 12 === a.charCodeAt(f) ? (this.ClrScr(), d = c = 1, e = "") : 13 === a.charCodeAt(f) ? (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c = 1, g = !0, e = "") : 0 !== a.charCodeAt(f) && (e += String.fromCharCode(a.charCodeAt(f) & 255), c + e.length > this.WindCols && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), e = "", c = 1, d += 1, g = !0)); this._LastChar = a.charCodeAt(f); d > this.WindRows && (d = this.WindRows, this.ScrollUpWindow(1), g = !0); g && this.GotoXY(c,
            d)
        } 0 < e.length && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, this.GotoXY(c, d))
    }; a.WriteATASCII = function (a) {
        "undefined" === typeof a && (a = ""); for (var c = this.WhereX(), d = this.WhereY(), e = "", f = 0; f < a.length; f++) {
            var g = !1; 0 === a.charCodeAt(f) && (f += 0); 27 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 28 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 29 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 30 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 31 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 125 !== a.charCodeAt(f) ||
            this._ATASCIIEscaped ? 126 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 127 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 155 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 156 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 157 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 253 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 254 !== a.charCodeAt(f) || this._ATASCIIEscaped ? 255 !== a.charCodeAt(f) || this._ATASCIIEscaped ? (e = 0 === a.charCodeAt(f) && 13 === this._LastChar ? e + "" : e + String.fromCharCode(a.charCodeAt(f) & 255), this._ATASCIIEscaped = !1, this._LastChar =
            a.charCodeAt(f), c + e.length > this.WindCols && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), e = "", c = 1, d += 1, g = !0)) : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, e = "", this.GotoXY(c, d), this.InsChar()) : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, e = "", this.GotoXY(c, d), this.DelChar()) : this.Beep() : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c = 1, e = "", this.GotoXY(c, d), this.InsLine()) : (this.FastWrite(e, this.WhereXA(),
            this.WhereYA(), this._CharInfo), c = 1, e = "", this.GotoXY(c, d), this.DelLine()) : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c = 1, d += 1, g = !0, e = "") : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, e = "", c === this.WindCols ? (c = 1, d += 1) : c += 8 - c % 8, g = !0) : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, e = "", g = !0, 1 < c && (--c, this.FastWrite(" ", c, this.WhereYA(), this._CharInfo))) : (this.ClrScr(), d = c = 1, e = "") : (this.FastWrite(e, this.WhereXA(), this.WhereYA(),
            this._CharInfo), c += e.length, c = c < this.WindCols ? c + 1 : 1, g = !0, e = "") : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, c = 1 < c ? c - 1 : this.WindCols, g = !0, e = "") : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, d = d < this.WindRows ? d + 1 : 1, g = !0, e = "") : (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, d = 1 < d ? d - 1 : this.WindRows, g = !0, e = "") : this._ATASCIIEscaped = !0; d > this.WindRows && (d = this.WindRows, this.ScrollUpWindow(1), g = !0); g && this.GotoXY(c, d)
        } 0 <
        e.length && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, this.GotoXY(c, d))
    }; a.WritePETSCII = function (a) {
        "undefined" === typeof a && (a = ""); for (var c = this.WhereX(), d = this.WhereY(), e = "", f = 0; f < a.length; f++) {
            var g = !1; "" !== e && -1 !== this._FlushBeforeWritePETSCII.indexOf(a.charCodeAt(f)) && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, g = !0, e = ""); if (0 === a.charCodeAt(f)) f += 0; else if (5 === a.charCodeAt(f)) this.TextColor(this.PETSCII_WHITE); else if (7 === a.charCodeAt(f)) this.Beep();
            else if (8 === a.charCodeAt(f)) console.log("PETSCII 0x08"); else if (9 === a.charCodeAt(f)) console.log("PETSCII 0x09"); else if (10 === a.charCodeAt(f)) f += 0; else if (13 === a.charCodeAt(f) || 141 === a.charCodeAt(f)) c = 1, d += 1, this._CharInfo.Reverse = !1, g = !0; else if (14 === a.charCodeAt(f)) this.SetFont("C64-Lower"); else if (17 === a.charCodeAt(f)) d += 1, g = !0; else if (18 === a.charCodeAt(f)) this._CharInfo.Reverse = !0; else if (19 === a.charCodeAt(f)) d = c = 1, g = !0; else if (20 === a.charCodeAt(f)) {
                if (1 < c || 1 < d) 1 === c ? (c = this.WindCols, --d) : --c,
                this.GotoXY(c, d), this.DelChar(1)
            } else if (28 === a.charCodeAt(f)) this.TextColor(this.PETSCII_RED); else if (29 === a.charCodeAt(f)) c === this.WindCols ? (c = 1, d += 1) : c += 1, g = !0; else if (30 === a.charCodeAt(f)) this.TextColor(this.PETSCII_GREEN); else if (31 === a.charCodeAt(f)) this.TextColor(this.PETSCII_BLUE); else if (129 === a.charCodeAt(f)) this.TextColor(this.PETSCII_ORANGE); else if (142 === a.charCodeAt(f)) this.SetFont("C64-Upper"); else if (144 === a.charCodeAt(f)) this.TextColor(this.PETSCII_BLACK); else if (145 === a.charCodeAt(f)) 1 <
            d && (--d, g = !0); else if (146 === a.charCodeAt(f)) this._CharInfo.Reverse = !1; else if (147 === a.charCodeAt(f)) this.ClrScr(), d = c = 1; else if (148 === a.charCodeAt(f)) this.GotoXY(c, d), this.InsChar(1); else if (149 === a.charCodeAt(f)) this.TextColor(this.PETSCII_BROWN); else if (150 === a.charCodeAt(f)) this.TextColor(this.PETSCII_LIGHTRED); else if (151 === a.charCodeAt(f)) this.TextColor(this.PETSCII_DARKGRAY); else if (152 === a.charCodeAt(f)) this.TextColor(this.PETSCII_GRAY); else if (153 === a.charCodeAt(f)) this.TextColor(this.PETSCII_LIGHTGREEN);
            else if (154 === a.charCodeAt(f)) this.TextColor(this.PETSCII_LIGHTBLUE); else if (155 === a.charCodeAt(f)) this.TextColor(this.PETSCII_LIGHTGRAY); else if (156 === a.charCodeAt(f)) this.TextColor(this.PETSCII_PURPLE); else if (157 === a.charCodeAt(f)) { if (1 < c || 1 < d) 1 === c ? (c = this.WindCols, --d) : --c, g = !0 } else 158 === a.charCodeAt(f) ? this.TextColor(this.PETSCII_YELLOW) : 159 === a.charCodeAt(f) ? this.TextColor(this.PETSCII_CYAN) : 0 !== a.charCodeAt(f) && (e += String.fromCharCode(a.charCodeAt(f) & 255), c + e.length > this.WindCols && (this.FastWrite(e,
            this.WhereXA(), this.WhereYA(), this._CharInfo), e = "", c = 1, d += 1, g = !0)); d > this.WindRows && (d = this.WindRows, this.ScrollUpWindow(1), g = !0); g && this.GotoXY(c, d)
        } 0 < e.length && (this.FastWrite(e, this.WhereXA(), this.WhereYA(), this._CharInfo), c += e.length, this.GotoXY(c, d))
    }; a.WriteLn = function (a) { "undefined" === typeof a && (a = ""); this.Write(a + "\r\n") }; a.onfontchange = new TypedEvent; a.onscreensizechange = new TypedEvent; a.BLACK = 0; a.BLUE = 1; a.GREEN = 2; a.CYAN = 3; a.RED = 4; a.MAGENTA = 5; a.BROWN = 6; a.LIGHTGRAY = 7; a.DARKGRAY = 8; a.LIGHTBLUE =
    9; a.LIGHTGREEN = 10; a.LIGHTCYAN = 11; a.LIGHTRED = 12; a.LIGHTMAGENTA = 13; a.YELLOW = 14; a.WHITE = 15; a.BLINK = 128; a.PETSCII_BLACK = 0; a.PETSCII_WHITE = 1; a.PETSCII_RED = 2; a.PETSCII_CYAN = 3; a.PETSCII_PURPLE = 4; a.PETSCII_GREEN = 5; a.PETSCII_BLUE = 6; a.PETSCII_YELLOW = 7; a.PETSCII_ORANGE = 8; a.PETSCII_BROWN = 9; a.PETSCII_LIGHTRED = 10; a.PETSCII_DARKGRAY = 11; a.PETSCII_GRAY = 12; a.PETSCII_LIGHTGREEN = 13; a.PETSCII_LIGHTBLUE = 14; a.PETSCII_LIGHTGRAY = 15; a._Atari = !1; a._ATASCIIEscaped = !1; a._BareLFtoCRLF = !1; a._Blink = !0; a._BlinkHidden = !1; a._Buffer =
    null; a._C64 = !1; a._Canvas = null; a._CanvasContext = null; a._CharInfo = new CharInfo(" ", a.LIGHTGRAY); a._Container = null; a._Cursor = null; a._FlushBeforeWritePETSCII = [5, 7, 8, 9, 10, 13, 14, 17, 18, 19, 20, 28, 29, 30, 31, 129, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]; a._Font = null; a._InScrollBack = !1; a._KeyBuf = []; a._LastChar = 0; a._LocalEcho = !1; a._ScreenSize = new Point(80, 25); a._ScrollBack = null; a._ScrollBackPosition = -1; a._ScrollBackSize = 1E3; a._ScrollBackTemp = null; a._WindMin = 0; a._WindMax = 6223; return a
}(),
BlinkState; (function (a) { a[a.Show = 0] = "Show"; a[a.Hide = 1] = "Hide" })(BlinkState || (BlinkState = {}));
var Cursor = function () {
    function a(a, c, d) {
        var e = this; this.onhide = new TypedEvent; this.onshow = new TypedEvent; this._BlinkRate = 500; this._BlinkState = 1; this._Colour = "#" + c.toString(16); this._Position = new Point(1, 1); this._Size = d; this._Visible = !0; this._WindowOffset = new Point(0, 0); this._WindowOffsetAdjusted = new Point(0, 0); this._Canvas = document.createElement("canvas"); this._Canvas.getContext && (this._Canvas.style.position = "absolute", this._Context = this._Canvas.getContext("2d"), a.appendChild(this._Canvas), this.Update(),
        this.Draw(), this._Timer = setInterval(function () { e.OnTimer() }, this._BlinkRate))
    } Object.defineProperty(a.prototype, "BlinkRate", { set: function (a) { var c = this; this._BlinkRate = a; clearInterval(this._Timer); this._Timer = setInterval(function () { c.OnTimer() }, this._BlinkRate) }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype, "Colour", { set: function (a) { this._Colour = a; this.Draw() }, enumerable: !0, configurable: !0 }); a.prototype.Draw = function () {
        this._Context && (this._Canvas.width = this._Size.x, this._Canvas.height =
        this._Size.y, this._Context.fillStyle = this._Colour, this._Context.fillRect(0, this._Size.y - .2 * this._Size.y, this._Size.x, .2 * this._Size.y))
    }; a.prototype.OnTimer = function () { this._BlinkState = 1 === this._BlinkState ? 0 : 1; this._Canvas.style.opacity = this._Visible ? 1 === this._BlinkState ? "0" : "1" : "0"; switch (this._BlinkState) { case 1: this.onhide.trigger(); break; case 0: this.onshow.trigger() } }; Object.defineProperty(a.prototype, "Position", {
        get: function () { return this._Position }, set: function (a) { this._Position = a; this.Update() },
        enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "Size", { set: function (a) { this._Size = a; this.Draw(); this.Update() }, enumerable: !0, configurable: !0 }); a.prototype.Update = function () { this._Canvas && this._Visible && (this._Canvas.style.left = (this._Position.x - 1) * this._Size.x + this._WindowOffsetAdjusted.x + "px", this._Canvas.style.top = (this._Position.y - 1) * this._Size.y + this._WindowOffsetAdjusted.y + "px") }; Object.defineProperty(a.prototype, "Visible", {
        set: function (a) { (this._Visible = a) && this.Update() },
        enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "WindowOffset", { set: function (a) { if (a.x !== this._WindowOffset.x || a.y !== this._WindowOffset.y) { this._WindowOffset = a; this._Canvas.style.left = "0px"; this._Canvas.style.top = "0px"; var c = Offset.getOffset(this._Canvas); this._WindowOffsetAdjusted.x = a.x - c.x; this._WindowOffsetAdjusted.y = a.y - c.y; this.Update() } }, enumerable: !0, configurable: !0 }); return a
}(), CrtFont = function () {
    function a() {
        this.onchange = new TypedEvent; this._CanvasContext = this._Canvas =
        null; this._CharMap = []; this._Name = "CP437"; this._Loading = 0; this._NewName = "CP437"; this._NewSize = new Point(9, 16); this._Png = null; this._Size = new Point(9, 16); this._Canvas = document.createElement("canvas"); this._Canvas.getContext && (this._CanvasContext = this._Canvas.getContext("2d"), this.Load(this._Name, this._Size.x, this._Size.y))
    } a.prototype.GetChar = function (b, c) {
        if (0 < this._Loading || 0 > b || 255 < b || 0 > c.Attr || 255 < c.Attr) return null; var d = b + "-" + c.Attr + "-" + c.Reverse; if (!this._CharMap[d]) {
            this._CharMap[d] = this._CanvasContext.getImageData(b *
            this._Size.x, 0, this._Size.x, this._Size.y); var e, f; 0 === this._Name.indexOf("C64") ? (e = a.PETSCII_COLOURS[(c.Attr & 240) >> 4], f = a.PETSCII_COLOURS[c.Attr & 15]) : (e = a.ANSI_COLOURS[(c.Attr & 240) >> 4], f = a.ANSI_COLOURS[c.Attr & 15]); if (c.Reverse) { var g = f; f = e; e = g } var g = e >> 16, h = e >> 8 & 255; e &= 255; var k = f >> 16, l = f >> 8 & 255; f &= 255; for (var m = 0, p = 0, q = 0, n = 0; n < this._CharMap[d].data.length; n += 4) this._CharMap[d].data[n] & 128 ? (m = k, p = l, q = f) : (m = g, p = h, q = e), this._CharMap[d].data[n] = m, this._CharMap[d].data[n + 1] = p, this._CharMap[d].data[n +
            2] = q, this._CharMap[d].data[n + 3] = 255
        } return this._CharMap[d]
    }; Object.defineProperty(a.prototype, "Height", { get: function () { return this._Size.y }, enumerable: !0, configurable: !0 }); a.prototype.Load = function (b, c, d) {
        var e = this; c = CrtFonts.GetBestFit(b, c, d); if (null === c) return console.log("fTelnet Error: Font CP=" + b + " does not exist"), !1; if (null != this._Png && this._Name === b && this._Size.x === c.x && this._Size.y === c.y) return !0; a.ANSI_COLOURS[7] = 11053224; a.ANSI_COLOURS[0] = 0; this._Loading += 1; this._NewName = b; this._NewSize =
        new Point(c.x, c.y); 0 === b.indexOf("Atari") && (a.ANSI_COLOURS[7] = 6534887, a.ANSI_COLOURS[0] = 20868); this._Png = new Image; this._Png.onload = function () { e.OnPngLoad() }; this._Png.onerror = function () { e.OnPngError() }; this._Png.src = CrtFonts.GetLocalUrl(b, this._NewSize.x, this._NewSize.y); return !0
    }; Object.defineProperty(a.prototype, "Name", { get: function () { return this._Name }, enumerable: !0, configurable: !0 }); a.prototype.OnPngError = function () {
        var a = this; this._Png = new Image; this._Png.crossOrigin = "Anonymous"; this._Png.onload =
        function () { a.OnPngLoad() }; this._Png.onerror = function () { alert("fTelnet Error: Unable to load requested font") }; this._Png.src = CrtFonts.GetRemoteUrl(this._NewName, this._NewSize.x, this._NewSize.y)
    }; a.prototype.OnPngLoad = function () { this._Name = this._NewName; this._Size = this._NewSize; this._Canvas.width = this._Png.width; this._Canvas.height = this._Png.height; this._CanvasContext.drawImage(this._Png, 0, 0); this._CharMap = []; --this._Loading; this.onchange.trigger() }; Object.defineProperty(a.prototype, "Size", {
        get: function () { return this._Size },
        enumerable: !0, configurable: !0
    }); Object.defineProperty(a.prototype, "Width", { get: function () { return this._Size.x }, enumerable: !0, configurable: !0 }); a.ANSI_COLOURS = [0, 168, 43008, 43176, 11010048, 11010216, 11031552, 11053224, 5526612, 5526780, 5569620, 5569788, 16536660, 16536828, 16579668, 16579836]; a.PETSCII_COLOURS = [0, 16645884, 12458532, 3204806, 11803362, 2085406, 2169774, 14677514, 12075268, 6959876, 16665175, 4343104, 7369839, 5897817, 6247422, 10790818]; return a
}(), CrtFonts = function () {
    function a() { } a.GetBestFit = function (a,
    c, d) { if ("undefined" === typeof this._Fonts[a]) return null; if (1 === this._Fonts[a].length) return this._Fonts[a][0]; for (var e = 0; e < this._Fonts[a].length; e++) if (this._Fonts[a][e].x <= c && this._Fonts[a][e].y <= d) return this._Fonts[a][e]; return this._Fonts[a][this._Fonts[a].length - 1] }; a.GetLocalUrl = function (a, c, d) {
        var e = document.getElementById("fTelnetScript").src.replace("/ftelnet.min.js", "/fonts/" + a + "_" + c.toString(10) + "x" + d.toString(10) + ".png"); return e = e.replace("/ftelnet.debug.js", "/fonts/" + a + "_" + c.toString(10) +
        "x" + d.toString(10) + ".png")
    }; a.GetRemoteUrl = function (a, c, d) { return "http://embed.ftelnet.ca/ftelnet/fonts/" + a + "_" + c.toString(10) + "x" + d.toString(10) + ".png" }; a._Fonts = []; a.__ctor = function () {
        for (var b = "Amiga-BStrict_8x8 Amiga-BStruct_8x8 Amiga-MicroKnight_8x16 Amiga-MicroKnight_8x8 Amiga-MoSoul_8x16 Amiga-MoSoul_8x8 Amiga-PotNoodle_8x11 Amiga-PotNoodle_8x16 Amiga-TopazPlus_8x11 Amiga-Topaz_8x11 Amiga-Topaz_8x16 Atari-Arabic_16x16 Atari-Arabic_8x16 Atari-Graphics_16x16 Atari-Graphics_8x16 Atari-Graphics_8x8 Atari-International_16x16 Atari-International_8x16 C128-Lower_8x16 C128-Upper_8x16 C128-Upper_8x8 C128_Lower_8x8 C64-Lower_16x16 C64-Lower_8x16 C64-Lower_8x8 C64-Upper_16x16 C64-Upper_8x16 C64-Upper_8x8 CP437_10x19 CP437_12x23 CP437_6x8 CP437_7x12 CP437_8x12 CP437_8x13 CP437_8x14 CP437_8x16 CP437_8x8 CP437_9x16 CP737_12x23 CP737_9x16 CP775_9x16 CP850_10x19 CP850_12x23 CP850_8x13 CP850_9x16 CP852_10x19 CP852_12x23 CP852_9x16 CP855_9x16 CP857_9x16 CP860_9x16 CP861_9x16 CP862_10x19 CP863_9x16 CP865_10x19 CP865_12x23 CP865_8x13 CP865_9x16 CP866_9x16 CP869_9x16 SyncTerm-0_8x14 SyncTerm-0_8x16 SyncTerm-0_8x8 SyncTerm-10_8x16 SyncTerm-11_8x14 SyncTerm-11_8x16 SyncTerm-11_8x8 SyncTerm-12_8x16 SyncTerm-13_8x16 SyncTerm-14_8x14 SyncTerm-14_8x16 SyncTerm-14_8x8 SyncTerm-15_8x14 SyncTerm-15_8x16 SyncTerm-15_8x8 SyncTerm-16_8x14 SyncTerm-16_8x16 SyncTerm-16_8x8 SyncTerm-17_8x16 SyncTerm-17_8x8 SyncTerm-18_8x14 SyncTerm-18_8x16 SyncTerm-18_8x8 SyncTerm-19_8x16 SyncTerm-19_8x8 SyncTerm-1_8x16 SyncTerm-20_8x14 SyncTerm-20_8x16 SyncTerm-20_8x8 SyncTerm-21_8x14 SyncTerm-21_8x16 SyncTerm-21_8x8 SyncTerm-22_8x16 SyncTerm-23_8x14 SyncTerm-23_8x16 SyncTerm-23_8x8 SyncTerm-24_8x14 SyncTerm-24_8x16 SyncTerm-24_8x8 SyncTerm-25_8x14 SyncTerm-25_8x16 SyncTerm-25_8x8 SyncTerm-26_8x16 SyncTerm-26_8x8 SyncTerm-27_8x16 SyncTerm-28_8x14 SyncTerm-28_8x16 SyncTerm-28_8x8 SyncTerm-29_8x14 SyncTerm-29_8x16 SyncTerm-29_8x8 SyncTerm-2_8x14 SyncTerm-2_8x16 SyncTerm-2_8x8 SyncTerm-30_8x16 SyncTerm-31_8x16 SyncTerm-32_8x16 SyncTerm-32_8x8 SyncTerm-33_8x16 SyncTerm-33_8x8 SyncTerm-34_8x16 SyncTerm-34_8x8 SyncTerm-35_8x16 SyncTerm-35_8x8 SyncTerm-36_8x16 SyncTerm-36_8x8 SyncTerm-37_8x16 SyncTerm-38_8x16 SyncTerm-39_8x16 SyncTerm-3_8x14 SyncTerm-3_8x16 SyncTerm-3_8x8 SyncTerm-40_8x16 SyncTerm-4_8x16 SyncTerm-5_8x16 SyncTerm-6_8x16 SyncTerm-7_8x14 SyncTerm-7_8x16 SyncTerm-7_8x8 SyncTerm-8_8x14 SyncTerm-8_8x16 SyncTerm-8_8x8 SyncTerm-9_8x14 SyncTerm-9_8x16 SyncTerm-9_8x8".split(" "),
        c = 0; c < b.length; c++) { var d = b[c].split("_"), e = d[1].split("x"), f = parseInt(e[0], 10), e = parseInt(e[1], 10); "undefined" === typeof a._Fonts[d[0]] && (a._Fonts[d[0]] = []); a._Fonts[d[0]].push(new Point(f, e)) } for (var g in a._Fonts) a._Fonts[g].sort(function (a, b) { return 0 === b.x - a.x ? b.y - a.y : b.x - a.x })
    }(); return a
}(), KeyPressEvent = function () { return function (a, b) { this.altKey = a.altKey; this.charCode = a.charCode; this.ctrlKey = a.ctrlKey; this.keyCode = a.keyCode; this.keyString = b; this.shiftKey = a.shiftKey } }(), StringUtils = function () {
    function a() { }
    a.AddCommas = function (a) { for (var c = "", d = 1, e = a.toString().length - 1; 0 <= e; e--) 3 < d && 1 === d % 3 && (c = "," + c), c = a.toString().charAt(e) + c, d++; return c }; a.FormatPercent = function (a, c) { return (100 * a).toFixed(c) + "%" }; a.NewString = function (a, c) { if (0 === a.length) return ""; for (var d = "", e = 0; e < c; e++) d += a.charAt(0); return d }; a.PadLeft = function (a, c, d) { if (0 === c.length) return a; for (; a.length < d;) a = c.charAt(0) + a; return a.substring(0, d) }; a.PadRight = function (a, c, d) {
        if (0 === c.length) return a; for (; a.length < d;) a += c.charAt(0); return a.substring(0,
        d)
    }; a.Trim = function (a) { return this.TrimLeft(this.TrimRight(a)) }; a.TrimLeft = function (a) { return a.replace(/^\s+/g, "") }; a.TrimRight = function (a) { return a.replace(/\s+$/g, "") }; return a
}(), TelnetCommand;
(function (a) { a[a.EndSubnegotiation = 240] = "EndSubnegotiation"; a[a.NoOperation = 241] = "NoOperation"; a[a.DataMark = 242] = "DataMark"; a[a.Break = 243] = "Break"; a[a.InterruptProcess = 244] = "InterruptProcess"; a[a.AbortOutput = 245] = "AbortOutput"; a[a.AreYouThere = 246] = "AreYouThere"; a[a.EraseCharacter = 247] = "EraseCharacter"; a[a.EraseLine = 248] = "EraseLine"; a[a.GoAhead = 249] = "GoAhead"; a[a.Subnegotiation = 250] = "Subnegotiation"; a[a.Will = 251] = "Will"; a[a.Wont = 252] = "Wont"; a[a.Do = 253] = "Do"; a[a.Dont = 254] = "Dont"; a[a.IAC = 255] = "IAC" })(TelnetCommand ||
(TelnetCommand = {})); var TelnetNegotiationState; (function (a) { a[a.Data = 0] = "Data"; a[a.IAC = 1] = "IAC"; a[a.Do = 2] = "Do"; a[a.Dont = 3] = "Dont"; a[a.Will = 4] = "Will"; a[a.Wont = 5] = "Wont" })(TelnetNegotiationState || (TelnetNegotiationState = {})); var TelnetOption;
(function (a) {
    a[a.TransmitBinary = 0] = "TransmitBinary"; a[a.Echo = 1] = "Echo"; a[a.Reconnection = 2] = "Reconnection"; a[a.SuppressGoAhead = 3] = "SuppressGoAhead"; a[a.ApproxMessageSizeNegotiation = 4] = "ApproxMessageSizeNegotiation"; a[a.Status = 5] = "Status"; a[a.TimingMark = 6] = "TimingMark"; a[a.RemoteControlledTransAndEcho = 7] = "RemoteControlledTransAndEcho"; a[a.OutputLineWidth = 8] = "OutputLineWidth"; a[a.OutputPageSize = 9] = "OutputPageSize"; a[a.OutputCarriageReturnDisposition = 10] = "OutputCarriageReturnDisposition"; a[a.OutputHorizontalTabStops =
    11] = "OutputHorizontalTabStops"; a[a.OutputHorizontalTabDisposition = 12] = "OutputHorizontalTabDisposition"; a[a.OutputFormfeedDisposition = 13] = "OutputFormfeedDisposition"; a[a.OutputVerticalTabstops = 14] = "OutputVerticalTabstops"; a[a.OutputVerticalTabDisposition = 15] = "OutputVerticalTabDisposition"; a[a.OutputLinefeedDisposition = 16] = "OutputLinefeedDisposition"; a[a.ExtendedASCII = 17] = "ExtendedASCII"; a[a.Logout = 18] = "Logout"; a[a.ByteMacro = 19] = "ByteMacro"; a[a.DataEntryTerminal = 20] = "DataEntryTerminal"; a[a.SUPDUP = 21] =
    "SUPDUP"; a[a.SUPDUPOutput = 22] = "SUPDUPOutput"; a[a.SendLocation = 23] = "SendLocation"; a[a.TerminalType = 24] = "TerminalType"; a[a.EndOfRecord = 25] = "EndOfRecord"; a[a.TACACSUserIdentification = 26] = "TACACSUserIdentification"; a[a.OutputMarking = 27] = "OutputMarking"; a[a.TerminalLocationNumber = 28] = "TerminalLocationNumber"; a[a.Telnet3270Regime = 29] = "Telnet3270Regime"; a[a.Xdot3PAD = 30] = "Xdot3PAD"; a[a.WindowSize = 31] = "WindowSize"; a[a.TerminalSpeed = 32] = "TerminalSpeed"; a[a.RemoteFlowControl = 33] = "RemoteFlowControl"; a[a.LineMode =
    34] = "LineMode"; a[a.XDisplayLocation = 35] = "XDisplayLocation"; a[a.EnvironmentOption = 36] = "EnvironmentOption"; a[a.AuthenticationOption = 37] = "AuthenticationOption"; a[a.EncryptionOption = 38] = "EncryptionOption"; a[a.NewEnvironmentOption = 39] = "NewEnvironmentOption"; a[a.TN3270E = 40] = "TN3270E"; a[a.XAUTH = 41] = "XAUTH"; a[a.CHARSET = 42] = "CHARSET"; a[a.TelnetRemoteSerialPort = 43] = "TelnetRemoteSerialPort"; a[a.ComPortControlOption = 44] = "ComPortControlOption"; a[a.TelnetSuppressLocalEcho = 45] = "TelnetSuppressLocalEcho"; a[a.TelnetStartTLS =
    46] = "TelnetStartTLS"; a[a.KERMIT = 47] = "KERMIT"; a[a.SENDURL = 48] = "SENDURL"; a[a.FORWARD_X = 49] = "FORWARD_X"
})(TelnetOption || (TelnetOption = {}));
var WebSocketProtocol = "https:" === document.location.protocol ? "wss" : "ws", WebSocketSupportsTypedArrays = "Uint8Array" in window && "set" in Uint8Array.prototype, WebSocketSupportsBinaryType = WebSocketSupportsTypedArrays && ("binaryType" in WebSocket.prototype || !!(new WebSocket(WebSocketProtocol + "://.")).binaryType), WebSocketConnection = function () {
    function a() {
        this.onclose = new TypedEvent; this.onconnect = new TypedEvent; this.onlocalecho = new TypedEvent; this.onioerror = new TypedEvent; this.onsecurityerror = new TypedEvent;
        this._WasConnected = !1; this._OutputBuffer = this._InputBuffer = null; this._Protocol = "plain"; this._WebSocket = null; this._InputBuffer = new ByteArray; this._LocalEcho = !1; this._OutputBuffer = new ByteArray
    } Object.defineProperty(a.prototype, "bytesAvailable", { get: function () { return this._InputBuffer.bytesAvailable }, enumerable: !0, configurable: !0 }); a.prototype.close = function () { this._WebSocket && this._WebSocket.close() }; a.prototype.connect = function (a, c, d, e, f) {
        var g = this; "undefined" === typeof d && (d = ""); "undefined" === typeof e &&
        (e = 1123); "undefined" === typeof f && (f = 11235); this._WasConnected = !1; var h; h = "WebSocket" in window && (2 === WebSocket.CLOSED || 2 === WebSocket.prototype.CLOSED) ? ["plain"] : WebSocketSupportsBinaryType && WebSocketSupportsTypedArrays ? ["binary", "base64", "plain"] : ["base64", "plain"]; this._WebSocket = "" === d ? new WebSocket(WebSocketProtocol + "://" + a + ":" + c, h) : new WebSocket(WebSocketProtocol + "://" + d + ":" + ("wss" === WebSocketProtocol ? f : e) + "/" + a + "/" + c, h); 0 <= h.indexOf("binary") && (this._WebSocket.binaryType = "arraybuffer"); this._WebSocket.onclose =
        function () { g.OnSocketClose() }; this._WebSocket.onerror = function (a) { g.OnSocketError(a) }; this._WebSocket.onmessage = function (a) { g.OnSocketMessage(a) }; this._WebSocket.onopen = function () { g.OnSocketOpen() }
    }; Object.defineProperty(a.prototype, "connected", { get: function () { return this._WebSocket ? this._WebSocket.readyState === this._WebSocket.OPEN || this._WebSocket.readyState === WebSocket.OPEN : !1 }, enumerable: !0, configurable: !0 }); a.prototype.flush = function () {
        var a = []; for (this._OutputBuffer.position = 0; 0 < this._OutputBuffer.bytesAvailable;) {
            var c =
            this._OutputBuffer.readUnsignedByte(); a.push(c)
        } this.Send(a); this._OutputBuffer.clear()
    }; Object.defineProperty(a.prototype, "LocalEcho", { set: function (a) { this._LocalEcho = a }, enumerable: !0, configurable: !0 }); a.prototype.NegotiateInbound = function (a) { for (; a.bytesAvailable;) { var c = a.readUnsignedByte(); this._InputBuffer.writeByte(c) } }; a.prototype.OnSocketClose = function () { this._WasConnected ? this.onclose.trigger() : this.onsecurityerror.trigger(); this._WasConnected = !1 }; a.prototype.OnSocketError = function (a) { this.onioerror.trigger(a) };
    a.prototype.OnSocketOpen = function () { this._Protocol = this._WebSocket.protocol ? this._WebSocket.protocol : "plain"; this._WasConnected = !0; this.onconnect.trigger() }; a.prototype.OnSocketMessage = function (a) {
        0 === this._InputBuffer.bytesAvailable && this._InputBuffer.clear(); var c = this._InputBuffer.position; this._InputBuffer.position = this._InputBuffer.length; var d = new ByteArray; if ("binary" === this._Protocol) { var e = new Uint8Array(a.data); for (a = 0; a < e.length; a++) d.writeByte(e[a]) } else "base64" === this._Protocol ? d.writeString(atob(a.data)) :
        d.writeString(a.data); d.position = 0; this.NegotiateInbound(d); this._InputBuffer.position = c
    }; a.prototype.readBytes = function (a, c, d) { return this._InputBuffer.readBytes(a, c, d) }; a.prototype.readString = function (a) { return this._InputBuffer.readString(a) }; a.prototype.readUnsignedByte = function () { return this._InputBuffer.readUnsignedByte() }; a.prototype.readUnsignedShort = function () { return this._InputBuffer.readUnsignedShort() }; a.prototype.Send = function (a) {
        var c = 0, d = ""; if ("binary" === this._Protocol) this._WebSocket.send((new Uint8Array(a)).buffer);
        else if ("base64" === this._Protocol) { for (c = 0; c < a.length; c++) d += String.fromCharCode(a[c]); this._WebSocket.send(btoa(d)) } else { for (c = 0; c < a.length; c++) d += String.fromCharCode(a[c]); this._WebSocket.send(d) }
    }; a.prototype.writeByte = function (a) { this._OutputBuffer.writeByte(a) }; a.prototype.writeBytes = function (a, c, d) { this._OutputBuffer.writeBytes(a, c, d) }; a.prototype.writeShort = function (a) { this._OutputBuffer.writeShort(a) }; a.prototype.writeString = function (a) { this._OutputBuffer.writeString(a); this.flush() }; return a
}(),
TelnetConnection = function (a) {
    function b() { a.call(this); this._NegotiatedOptions = []; for (var b = 0; 256 > b; b++) this._NegotiatedOptions[b] = 0; this._TerminalTypeIndex = this._NegotiationState = 0; this._TerminalTypes = ["ansi-bbs", "ansi", "cp437", "cp437"] } __extends(b, a); b.prototype.flush = function () { var a = []; for (this._OutputBuffer.position = 0; 0 < this._OutputBuffer.bytesAvailable;) { var b = this._OutputBuffer.readUnsignedByte(); a.push(b); 255 === b && a.push(255) } this.Send(a); this._OutputBuffer.clear() }; b.prototype.HandleAreYouThere =
    function () { var a = []; a.push(46); this.Send(a) }; b.prototype.HandleEcho = function (a) { switch (a) { case 253: this.SendWill(1); this._LocalEcho = !0; this.onlocalecho.trigger(this._LocalEcho); break; case 254: this.SendWont(1); this._LocalEcho = !1; this.onlocalecho.trigger(this._LocalEcho); break; case 251: this.SendDo(1); this._LocalEcho = !1; this.onlocalecho.trigger(this._LocalEcho); break; case 252: this.SendDont(1), this._LocalEcho = !0, this.onlocalecho.trigger(this._LocalEcho) } }; b.prototype.HandleTerminalType = function () {
        this.SendWill(24);
        this.SendSubnegotiate(24); var a = this._TerminalTypes[this._TerminalTypeIndex], b = []; b.push(0); for (var e = 0; e < a.length; e++) b.push(a.charCodeAt(e)); this.Send(b); this.SendSubnegotiateEnd(); this._TerminalTypeIndex = this._TerminalTypeIndex < this._TerminalTypes.length - 1 ? this._TerminalTypeIndex + 1 : 0
    }; b.prototype.HandleTerminalLocationNumber = function () {
        this.SendWill(28); this.SendSubnegotiate(28); var a = []; a.push(0); a.push(0); a.push(0); a.push(0); a.push(0); a.push(-1); a.push(255); a.push(255); a.push(255); for (var b =
        [], e = 0; e < a.length; e++) b.push(a[e]), 255 === a[e] && b.push(255); this.Send(b); this.SendSubnegotiateEnd()
    }; b.prototype.HandleWindowSize = function () { this.SendWill(31); this.SendSubnegotiate(31); var a = []; a[0] = Crt.WindCols >> 8 & 255; a[1] = Crt.WindCols & 255; a[2] = Crt.WindRows >> 8 & 255; a[3] = Crt.WindRows & 255; for (var b = [], e = 0; e < a.length; e++) b.push(a[e]), 255 === a[e] && b.push(255); this.Send(b); this.SendSubnegotiateEnd() }; Object.defineProperty(b.prototype, "LocalEcho", {
        set: function (a) {
            this._LocalEcho = a; this.connected && (this._LocalEcho ?
            this.SendWill(1) : this.SendWont(1))
        }, enumerable: !0, configurable: !0
    }); b.prototype.NegotiateInbound = function (a) {
        for (; a.bytesAvailable;) {
            var b = a.readUnsignedByte(); if (0 === this._NegotiationState) 255 === b ? this._NegotiationState = 1 : this._InputBuffer.writeByte(b); else if (1 === this._NegotiationState) if (255 === b) this._NegotiationState = 0, this._InputBuffer.writeByte(b); else switch (b) {
                case 241: case 242: case 243: case 244: case 245: case 247: case 248: case 249: this._NegotiationState = 0; break; case 246: this.HandleAreYouThere();
                    this._NegotiationState = 0; break; case 253: this._NegotiationState = 2; break; case 254: this._NegotiationState = 3; break; case 251: this._NegotiationState = 4; break; case 252: this._NegotiationState = 5; break; default: this._NegotiationState = 0
            } else {
                if (2 === this._NegotiationState) switch (b) {
                    case 246: this.SendWill(246); this._NegotiatedOptions[246] = 0; break; case 0: this.SendWill(b); break; case 1: this.HandleEcho(253); break; case 3: this.SendWill(b); break; case 24: this.HandleTerminalType(); break; case 28: this.HandleTerminalLocationNumber();
                        break; case 31: this.HandleWindowSize(); break; case 34: this.SendWont(b); break; default: this.SendWont(b)
                } else if (3 === this._NegotiationState) switch (b) { case 0: this.SendWill(b); break; case 1: this.HandleEcho(254); break; case 3: this.SendWill(b); break; case 28: this.SendWont(b); break; case 31: this.SendWont(b); break; case 34: this.SendWont(b); break; default: this.SendWont(b) } else if (4 === this._NegotiationState) switch (b) {
                    case 0: this.SendDo(b); break; case 1: this.HandleEcho(251); break; case 3: this.SendDo(b); break; case 28: this.SendDont(b);
                        break; case 31: this.SendDont(b); break; case 34: this.SendDont(b); break; default: this.SendDont(b)
                } else if (5 === this._NegotiationState) switch (b) { case 0: this.SendDo(b); break; case 1: this.HandleEcho(252); break; case 3: this.SendDo(b); break; case 28: this.SendDont(b); break; case 31: this.SendDont(b); break; case 34: this.SendDont(b); break; default: this.SendDont(b) } this._NegotiationState = 0
            }
        }
    }; b.prototype.OnSocketOpen = function () { a.prototype.OnSocketOpen.call(this); this._LocalEcho ? this.SendWill(1) : this.SendWont(1) }; b.prototype.SendDo =
    function (a) { if (253 !== this._NegotiatedOptions[a]) { this._NegotiatedOptions[a] = 253; var b = []; b.push(255); b.push(253); b.push(a); this.Send(b) } }; b.prototype.SendDont = function (a) { if (254 !== this._NegotiatedOptions[a]) { this._NegotiatedOptions[a] = 254; var b = []; b.push(255); b.push(254); b.push(a); this.Send(b) } }; b.prototype.SendSubnegotiate = function (a) { var b = []; b.push(255); b.push(250); b.push(a); this.Send(b) }; b.prototype.SendSubnegotiateEnd = function () { var a = []; a.push(255); a.push(240); this.Send(a) }; b.prototype.SendWill =
    function (a) { if (251 !== this._NegotiatedOptions[a]) { this._NegotiatedOptions[a] = 251; var b = []; b.push(255); b.push(251); b.push(a); this.Send(b) } }; b.prototype.SendWont = function (a) { if (252 !== this._NegotiatedOptions[a]) { this._NegotiatedOptions[a] = 252; var b = []; b.push(255); b.push(252); b.push(a); this.Send(b) } }; return b
}(WebSocketConnection), VirtualKeyboard = function () {
    function a() { } a.Init = function (a) {
        var c = this; a.appendChild(this.CreateDivElement()); a = document.getElementsByClassName("fTelnetKeyboardKey"); for (var d =
        0; d < a.length; d++) if (a[d].addEventListener) { var e = a[d].getAttribute("data-keycode"); 0 < this._Keys[e][2] ? a[d].addEventListener("click", function (a) { c.OnCharCode(a) }, !1) : a[d].addEventListener("click", function (a) { c.OnKeyCode(a) }, !1) }
    }; a.CreateDivElement = function () {
        for (var a = [[[27, "Esc", 0, 0], [112, "F1", 0, 0], [113, "F2", 0, 0], [114, "F3", 0, 0], [115, "F4", 0, 0], [116, "F5", 0, 0], [117, "F6", 0, 0], [118, "F7", 0, 0], [119, "F8", 0, 0], [120, "F9", 0, 0], [121, "F10", 0, 0], [122, "F11", 0, 0], [123, "F12", 0, 0], [145, "Scr<br />Lk", 0, 0], [1006, "Prt<br />Scr",
        0, 0], [45, "Ins", 0, 0], [46, "Del", 0, 0]], [[192, "~<br />`", 126, 96], [49, "!<br />1", 33, 49], [50, "@<br />2", 64, 50], [51, "#<br />3", 35, 51], [52, "$<br />4", 36, 52], [53, "%<br />5", 37, 53], [54, "^<br />6", 94, 54], [55, "&<br />7", 38, 55], [56, "*<br />8", 42, 56], [57, "(<br />9", 40, 57], [48, ")<br />0", 41, 48], [173, "_<br />-", 95, 45], [61, "+<br />=", 43, 61], [8, "Backspace", 0, 0], [36, "Home", 0, 0]], [[9, "Tab", 0, 0], [81, "Q", 81, 113], [87, "W", 87, 119], [69, "E", 69, 101], [82, "R", 82, 114], [84, "T", 84, 116], [89, "Y", 89, 121], [85, "U", 85, 117], [73, "I", 73,
        105], [79, "O", 79, 111], [80, "P", 80, 112], [219, "{<br />[", 123, 91], [221, "}<br />]", 125, 93], [220, "|<br />\\", 124, 92], [33, "Page<br />Up", 0, 0]], [[20, "Caps Lock", 0, 0], [65, "A", 65, 97], [83, "S", 83, 115], [68, "D", 68, 100], [70, "F", 70, 102], [71, "G", 71, 103], [72, "H", 72, 104], [74, "J", 74, 106], [75, "K", 75, 107], [76, "L", 76, 108], [59, ":<br />;", 58, 59], [222, "\"<br />'", 34, 39], [13, "Enter", 0, 0], [34, "Page<br />Down", 0, 0]], [[1004, "Shift", 0, 0], [90, "Z", 90, 122], [88, "X", 88, 120], [67, "C", 67, 99], [86, "V", 86, 118], [66, "B", 66, 98], [78, "N", 78, 110],
        [77, "M", 77, 109], [188, "&lt;<br />,", 60, 44], [190, "&gt;<br />.", 62, 46], [191, "?<br />/", 63, 47], [1005, "Shift", 0, 0], [38, "", 0, 0], [35, "End", 0, 0]], [[17, "Ctrl", 0, 0], [91, "", 0, 0], [18, "Alt", 0, 0], [32, "&nbsp;", 0, 0], [18, "Alt", 0, 0], [93, "", 0, 0], [17, "Ctrl", 0, 0], [37, "", 0, 0], [40, "", 0, 0], [39, "", 0, 0]]], c = "", d = 0; d < a.length; d++) {
            c += '<div class="fTelnetKeyboardRow'; 0 === d && (c += " fTelnetKeyboardRowFunction"); for (var c = c + '">', e = 0; e < a[d].length; e++) c += '<div class="fTelnetKeyboardKey', "undefined" !== typeof this._ClassKeys[a[d][e][0]] &&
            (c += " fTelnetKeyboardKey" + this._ClassKeys[a[d][e][0]]), c += '" data-keycode="' + a[d][e][0] + '">', c += a[d][e][1], c += "</div>", this._Keys[a[d][e][0]] = a[d][e]; c += "</div>"
        } this._Div = document.createElement("div"); this._Div.id = "fTelnetKeyboard"; this._Div.innerHTML = c; this._Div.style.display = this._Visible ? "block" : "none"; return this._Div
    }; a.HighlightKey = function (a, c) { for (var d = document.getElementsByClassName(a), e = 0; e < d.length; e++) c ? d[e].style.color = "#00ff00" : d[e].removeAttribute("style") }; a.OnCharCode = function (a) {
        a =
        parseInt(a.target.getAttribute("data-keycode"), 10); var c = 0, c = 65 <= a && 90 >= a ? parseInt(this._ShiftPressed !== this._CapsLockEnabled ? this._Keys[a][2] : this._Keys[a][3], 10) : parseInt(this._ShiftPressed ? this._Keys[a][2] : this._Keys[a][3], 10), d = !1, e = !0; this._AltPressed && (d = !0, e = !1); this._CtrlPressed && (d = !0, e = !1); this._ShiftPressed && (d = !0); Crt.PushKeyDown(0, a, this._CtrlPressed, this._AltPressed, this._ShiftPressed); e && Crt.PushKeyPress(c, 0, this._CtrlPressed, this._AltPressed, this._ShiftPressed); d && (this._ShiftPressed =
        this._CtrlPressed = this._AltPressed = !1, this.ReDrawSpecialKeys())
    }; a.OnKeyCode = function (a) {
        a = parseInt(a.target.getAttribute("data-keycode"), 10); var c = !1; switch (a) { case 18: this._AltPressed = !this._AltPressed; this.ReDrawSpecialKeys(); break; case 20: this._CapsLockEnabled = !this._CapsLockEnabled; this.ReDrawSpecialKeys(); break; case 17: this._CtrlPressed = !this._CtrlPressed; this.ReDrawSpecialKeys(); break; case 1004: case 1005: this._ShiftPressed = !this._ShiftPressed; this.ReDrawSpecialKeys(); break; default: c = !0 } Crt.PushKeyDown(0,
        a, this._CtrlPressed, this._AltPressed, this._ShiftPressed); c && (this._ShiftPressed = this._CtrlPressed = this._AltPressed = !1, this.ReDrawSpecialKeys())
    }; a.ReDrawSpecialKeys = function () { this.HighlightKey("fTelnetKeyboardKeyCapsLock", this._CapsLockEnabled); this.HighlightKey("fTelnetKeyboardKeyShiftLeft", this._ShiftPressed); this.HighlightKey("fTelnetKeyboardKeyShiftRight", this._ShiftPressed); this.HighlightKey("fTelnetKeyboardKeyCtrl", this._CtrlPressed); this.HighlightKey("fTelnetKeyboardKeyAlt", this._AltPressed) };
    Object.defineProperty(a, "Visible", { get: function () { return this._Visible }, set: function (a) { this._Visible = a; null != this._Div && (this._Div.style.display = a ? "block" : "none") }, enumerable: !0, configurable: !0 }); a._AltPressed = !1; a._CapsLockEnabled = !1; a._CtrlPressed = !1; a._Div = null; a._ShiftPressed = !1; a._Visible = !0; a._ClassKeys = {
        27: "Escape", 145: "SPID", 1006: "SPID", 45: "SPID", 46: "SPID", 8: "Backspace", 9: "Tab", 220: "Backslash", 20: "CapsLock", 13: "Enter", 1004: "ShiftLeft", 1005: "ShiftRight", 38: "ArrowUp", 17: "Ctrl", 91: "Win", 18: "Alt",
        32: "Spacebar", 93: "AppMenu", 37: "ArrowLeft", 40: "ArrowDown", 39: "ArrowRight"
    }; a._Keys = []; return a
}(), CRC = function () {
    function a() { } a.Calculate16 = function (a) { var c = 0, d = a.position; for (a.position = 0; 0 < a.bytesAvailable;) c = this.UpdateCrc(a.readUnsignedByte(), c); c = this.UpdateCrc(0, c); c = this.UpdateCrc(0, c); a.position = d; return c }; a.UpdateCrc = function (a, c) { return (this.CRC_TABLE[c >> 8 & 255] ^ c << 8 ^ a) & 65535 }; a.CRC_TABLE = [0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161, 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528,
    12915, 8786, 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205, 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572, 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669, 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874, 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758, 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144, 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899, 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802, 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233,
    60846, 64911, 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277, 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923, 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453, 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679, 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752, 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312, 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798, 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358, 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941,
    22068, 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596, 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223, 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254, 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427, 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265, 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183, 32310, 20053, 24180, 11923, 16050, 3793, 7920]; return a
}(), FileRecord = function () {
    function a(a, c) {
        this._Data = new ByteArray; this._Name = ""; this._Size = 0; this._Name = a; this._Size =
        c
    } Object.defineProperty(a.prototype, "data", { get: function () { return this._Data }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype, "name", { get: function () { return this._Name }, enumerable: !0, configurable: !0 }); Object.defineProperty(a.prototype, "size", { get: function () { return this._Size }, enumerable: !0, configurable: !0 }); return a
}(), YModemReceive = function () {
    function a(a) {
        this.ontransfercomplete = new TypedEvent; this.SOH = 1; this.STX = 2; this.EOT = 4; this.ACK = 6; this.CAN = 24; this.CAPG = 71; this._Blink = !1; this._ExpectingHeader =
        !0; this._Files = []; this._NextByte = this._LastGTime = 0; this._ShouldSendG = !0; this._TotalBytesReceived = 0; this._Connection = a
    } a.prototype.Cancel = function (a) {
        try { this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeString("\b\b\b\b\b     \b\b\b\b\b") } catch (c) { this.HandleIOError(c); return } try { this._Connection.readString() } catch (d) { this.HandleIOError(d); return } this.CleanUp("Cancelling (" +
        a + ")")
    }; a.prototype.CleanUp = function (a) { var c = this; clearInterval(this._Timer); this.lblStatus.Text = "Status: " + a; setTimeout(function () { c.Dispatch() }, 3E3) }; a.prototype.Dispatch = function () { this.pnlMain.Hide(); Crt.Blink = this._Blink; Crt.ShowCursor(); this.ontransfercomplete.trigger() }; a.prototype.Download = function () {
        var a = this; this._Timer = setInterval(function () { a.OnTimer() }, 50); this._Blink = Crt.Blink; Crt.Blink = !1; Crt.HideCursor(); this.pnlMain = new CrtPanel(null, 10, 5, 60, 14, 0, Crt.WHITE, Crt.BLUE, "YModem-G Receive Status (Hit CTRL+X to abort)",
        6); this.lblFileCount = new CrtLabel(this.pnlMain, 2, 2, 56, "Receiving file 1", 9, Crt.YELLOW, Crt.BLUE); this.lblFileName = new CrtLabel(this.pnlMain, 2, 4, 56, "File Name: ", 9, Crt.YELLOW, Crt.BLUE); this.lblFileSize = new CrtLabel(this.pnlMain, 2, 5, 56, "File Size: ", 9, Crt.YELLOW, Crt.BLUE); this.lblFileReceived = new CrtLabel(this.pnlMain, 2, 6, 56, "File Recv: ", 9, Crt.YELLOW, Crt.BLUE); this.pbFileReceived = new CrtProgressBar(this.pnlMain, 2, 7, 56, 219); this.lblTotalReceived = new CrtLabel(this.pnlMain, 2, 9, 56, "Total Recv: ", 9, Crt.YELLOW,
        Crt.BLUE); this.lblStatus = new CrtLabel(this.pnlMain, 2, 11, 56, "Status: Transferring file(s)", 9, Crt.WHITE, Crt.BLUE)
    }; a.prototype.FileAt = function (a) { return this._Files[a] }; Object.defineProperty(a.prototype, "FileCount", { get: function () { return this._Files.length }, enumerable: !0, configurable: !0 }); a.prototype.HandleIOError = function (a) { console.log("I/O Error: " + a); this._Connection.connected ? this.CleanUp("Unhandled I/O error") : this.CleanUp("Connection to server lost") }; a.prototype.OnTimer = function () {
        for (; Crt.KeyPressed() ;) {
            var a =
            Crt.ReadKey(); null !== a && 0 < a.keyString.length && a.keyString.charCodeAt(0) === this.CAN && this.Cancel("User requested abort")
        } for (; ;) {
            if (0 === this._NextByte) if (0 === this._Connection.bytesAvailable) { if (this._ShouldSendG && 3E3 < (new Date).getTime() - this._LastGTime) { try { this._Connection.writeByte(this.CAPG), this._Connection.flush() } catch (c) { this.HandleIOError(c); break } this._LastGTime = (new Date).getTime() } break } else try { this._NextByte = this._Connection.readUnsignedByte() } catch (d) { this.HandleIOError(d); break } switch (this._NextByte) {
                case this.CAN: this.CleanUp("Sender requested abort");
                    break; case this.SOH: case this.STX: this._ShouldSendG = !1; var e = this._NextByte === this.STX ? 1024 : 128; if (this._Connection.bytesAvailable < 2 + e + 1 + 1) return; this._NextByte = 0; var f = this._Connection.readUnsignedByte(), a = this._Connection.readUnsignedByte(); if (a !== 255 - f) { this.Cancel("Bad block #: " + a.toString() + " !== 255-" + f.toString()); return } a = new ByteArray; this._Connection.readBytes(a, 0, e); var g = this._Connection.readUnsignedShort(), h = CRC.Calculate16(a); if (g !== h) {
                        this.Cancel("Bad CRC: " + g.toString() + " !== " + h.toString());
                        return
                    } if (this._ExpectingHeader) {
                        if (0 !== f) { this.Cancel("Expecting header got block " + f.toString()); return } this._ExpectingHeader = !1; e = ""; for (g = a.readUnsignedByte() ; 0 !== g && 0 < a.bytesAvailable;) e += String.fromCharCode(g), g = a.readUnsignedByte(); f = ""; g = 0; for (g = a.readUnsignedByte() ; 48 <= g && 57 >= g && 0 < a.bytesAvailable;) f += String.fromCharCode(g), g = a.readUnsignedByte(); g = parseInt(f, 10); if (0 === e.length) { this.CleanUp("File(s) successfully received!"); return } if (isNaN(g) || 0 === g) {
                            this.Cancel("File Size missing from header block");
                            return
                        } this._File = new FileRecord(e, g); this.lblFileCount.Text = "Receiving file " + (this._Files.length + 1).toString(); this.lblFileName.Text = "File Name: " + e; this.lblFileSize.Text = "File Size: " + StringUtils.AddCommas(g) + " bytes"; this.lblFileReceived.Text = "File Recv: 0 bytes"; this.pbFileReceived.Value = 0; this.pbFileReceived.Maximum = g; try { this._Connection.writeByte(this.CAPG), this._Connection.flush() } catch (k) { this.HandleIOError(k); return }
                    } else e = Math.min(e, this._File.size - this._File.data.length), this._File.data.writeBytes(a,
                    0, e), this._TotalBytesReceived += e, this.lblFileReceived.Text = "File Recv: " + StringUtils.AddCommas(this._File.data.length) + " bytes", this.pbFileReceived.Value = this._File.data.length, this.lblTotalReceived.Text = "Total Recv: " + StringUtils.AddCommas(this._TotalBytesReceived) + " bytes"; break; case this.EOT: this._ShouldSendG = !0; try { this._Connection.writeByte(this.ACK), this._Connection.writeByte(this.CAPG), this._Connection.flush() } catch (l) { this.HandleIOError(l); return } this._NextByte = 0; this._ExpectingHeader = !0;
                        this._Files.push(this._File); this.SaveFile(this._Files.length - 1); break; default: this.Cancel("Unexpected byte: " + this._NextByte.toString()); return
            }
        }
    }; a.prototype.SaveFile = function (a) { for (var c = this._Files[a].data.toString(), d = new ArrayBuffer(c.length), e = new DataView(d), f = 0; f < c.length; f++) e.setUint8(f, c.charCodeAt(f)); c = new Blob([d], { type: "application/octet-binary" }); saveAs(c, this._Files[a].name) }; return a
}(), YModemSend = function () {
    function a(a) {
        this.ontransfercomplete = new TypedEvent; this.SOH = 1; this.STX =
        2; this.EOT = 4; this.ACK = 6; this.NAK = 21; this.CAN = 24; this.SUB = 26; this.CAPG = 71; this._Block = 0; this._Blink = !1; this._FileCount = this._FileBytesSent = this._EOTCount = 0; this._Files = []; this._TotalBytesSent = this._TotalBytes = this._State = 0; this._Connection = a
    } a.prototype.Cancel = function (a) {
        try { this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeByte(this.CAN), this._Connection.writeString("\b\b\b\b\b     \b\b\b\b\b") } catch (c) {
            this.HandleIOError(c);
            return
        } try { this._Connection.readString() } catch (d) { this.HandleIOError(d); return } this.CleanUp("Cancelling (" + a + ")")
    }; a.prototype.CleanUp = function (a) { var c = this; clearInterval(this._Timer); this.lblStatus.Text = "Status: " + a; setTimeout(function () { c.Dispatch() }, 3E3) }; a.prototype.Dispatch = function () { this.pnlMain.Hide(); Crt.Blink = this._Blink; Crt.ShowCursor(); this.ontransfercomplete.trigger() }; a.prototype.HandleIOError = function (a) {
        console.log("I/O Error: " + a); this._Connection.connected ? this.CleanUp("Unhandled I/O error") :
        this.CleanUp("Connection to server lost")
    }; a.prototype.OnTimer = function () {
        for (; Crt.KeyPressed() ;) { var a = Crt.ReadKey(); null !== a && 0 < a.keyString.length && a.keyString.charCodeAt(0) === this.CAN && this.Cancel("User requested abort") } if (3 === this._State || 0 !== this._Connection.bytesAvailable) switch (a = 0, this._State) {
            case 0: try { a = this._Connection.readUnsignedByte() } catch (c) { this.HandleIOError(c); break } if (a !== this.CAPG) { this.Cancel("Expecting G got " + a.toString() + " (State=" + this._State + ")"); break } try { this._Connection.readString() } catch (d) {
                this.HandleIOError(d);
                break
            } if (0 === this._Files.length) { this.SendEmptyHeaderBlock(); this.CleanUp("File(s) successfully sent!"); break } this._File = this._Files.shift(); this.lblFileCount.Text = "Sending file " + (this._FileCount - this._Files.length).toString() + " of " + this._FileCount.toString(); this.lblFileName.Text = "File Name: " + this._File.name; this.lblFileSize.Text = "File Size: " + StringUtils.AddCommas(this._File.size) + " bytes"; this.lblFileSent.Text = "File Sent: 0 bytes"; this.pbFileSent.Value = 0; this.pbFileSent.Maximum = this._File.size;
                this.SendHeaderBlock(); this._Block = 1; this._FileBytesSent = this._EOTCount = 0; this._State = 1; break; case 1: try { a = this._Connection.readUnsignedByte() } catch (e) { this.HandleIOError(e); break } if (a !== this.ACK && a !== this.CAPG) { this.Cancel("Expecting ACK/G got " + a.toString() + " (State=" + this._State + ")"); break } a === this.ACK ? this._State = 2 : a === this.CAPG && (this._State = 3); break; case 2: try { a = this._Connection.readUnsignedByte() } catch (f) { this.HandleIOError(f); break } if (a !== this.CAPG) {
                    this.Cancel("Expecting G got " + a.toString() +
                    " (State=" + this._State + ")"); break
                } this._State = 3; break; case 3: this.SendDataBlocks(16) && (this._State = 4); break; case 4: try { a = this._Connection.readUnsignedByte() } catch (g) { this.HandleIOError(g); break } if (a !== this.ACK && a !== this.NAK) { this.Cancel("Expecting (N)ACK got " + a.toString() + " (State=" + this._State + ")"); break } a === this.ACK ? this._State = 0 : a === this.NAK && this.SendEOT()
        }
    }; a.prototype.SendDataBlocks = function (a) {
        for (var c = 0; c < a; c++) {
            var d = Math.min(1024, this._File.data.bytesAvailable); if (0 === d) return this.SendEOT(),
            !0; var e = new ByteArray; this._File.data.readBytes(e, 0, d); if (1024 > e.length) { for (e.position = e.length; 1024 > e.length;) e.writeByte(this.SUB); e.position = 0 } try { this._Connection.writeByte(this.STX), this._Connection.writeByte(this._Block % 256), this._Connection.writeByte(255 - this._Block % 256), this._Connection.writeBytes(e), this._Connection.writeShort(CRC.Calculate16(e)), this._Connection.flush() } catch (f) { this.HandleIOError(f); break } this._Block++; this._FileBytesSent += d; this._TotalBytesSent += d; this.lblFileSent.Text =
            "File Sent: " + StringUtils.AddCommas(this._FileBytesSent) + " bytes"; this.pbFileSent.StepBy(d); this.lblTotalSent.Text = "Total Sent: " + StringUtils.AddCommas(this._TotalBytesSent) + " bytes"; this.pbTotalSent.StepBy(d)
        } return !1
    }; a.prototype.SendEmptyHeaderBlock = function () { for (var a = new ByteArray, c = 0; 128 > c; c++) a.writeByte(0); try { this._Connection.writeByte(this.SOH), this._Connection.writeByte(0), this._Connection.writeByte(255), this._Connection.writeBytes(a), this._Connection.writeShort(CRC.Calculate16(a)), this._Connection.flush() } catch (d) { this.HandleIOError(d) } };
    a.prototype.SendEOT = function () { try { this._Connection.writeByte(this.EOT), this._Connection.flush() } catch (a) { this.HandleIOError(a); return } this._EOTCount++ }; a.prototype.SendHeaderBlock = function () {
        for (var a = 0, c = new ByteArray, a = 0; a < this._File.name.length; a++) c.writeByte(this._File.name.charCodeAt(a)); c.writeByte(0); for (var d = this._File.size.toString(), a = 0; a < d.length; a++) c.writeByte(d.charCodeAt(a)); if (128 > c.length) for (; 128 > c.length;) c.writeByte(0); else if (128 !== c.length) if (1024 > c.length) for (; 1024 > c.length;) c.writeByte(0);
        else if (1024 !== c.length) { this.Cancel("Header packet exceeded 1024 bytes!"); return } try { this._Connection.writeByte(128 === c.length ? this.SOH : this.STX), this._Connection.writeByte(0), this._Connection.writeByte(255), this._Connection.writeBytes(c), this._Connection.writeShort(CRC.Calculate16(c)), this._Connection.flush() } catch (e) { this.HandleIOError(e) }
    }; a.prototype.Upload = function (a, c) {
        var d = this; this._FileCount = c; this._Files.push(a); if (this._Files.length === c) {
            this._Timer = setInterval(function () { d.OnTimer() },
            50); for (var e = 0; e < this._Files.length; e++) this._TotalBytes += this._Files[e].size; this._Blink = Crt.Blink; Crt.Blink = !1; Crt.HideCursor(); this.pnlMain = new CrtPanel(null, 10, 5, 60, 16, 0, Crt.WHITE, Crt.BLUE, "YModem-G Send Status (Hit CTRL+X to abort)", 6); this.lblFileCount = new CrtLabel(this.pnlMain, 2, 2, 56, "Sending file 1 of " + this._FileCount.toString(), 9, Crt.YELLOW, Crt.BLUE); this.lblFileName = new CrtLabel(this.pnlMain, 2, 4, 56, "File Name: " + this._Files[0].name, 9, Crt.YELLOW, Crt.BLUE); this.lblFileSize = new CrtLabel(this.pnlMain,
            2, 5, 56, "File Size: " + StringUtils.AddCommas(this._Files[0].size) + " bytes", 9, Crt.YELLOW, Crt.BLUE); this.lblFileSent = new CrtLabel(this.pnlMain, 2, 6, 56, "File Sent: 0 bytes", 9, Crt.YELLOW, Crt.BLUE); this.pbFileSent = new CrtProgressBar(this.pnlMain, 2, 7, 56, 219); this.lblTotalSize = new CrtLabel(this.pnlMain, 2, 9, 56, "Total Size: " + StringUtils.AddCommas(this._TotalBytes) + " bytes", 9, Crt.YELLOW, Crt.BLUE); this.lblTotalSent = new CrtLabel(this.pnlMain, 2, 10, 56, "Total Sent: 0 bytes", 9, Crt.YELLOW, Crt.BLUE); this.pbTotalSent =
            new CrtProgressBar(this.pnlMain, 2, 11, 56, 219); this.pbTotalSent.Maximum = this._TotalBytes; this.lblStatus = new CrtLabel(this.pnlMain, 2, 13, 56, "Status: Transferring file(s)", 9, Crt.WHITE, Crt.BLUE)
        }
    }; return a
}(), YModemSendState;
(function (a) { a[a.WaitingForHeaderRequest = 0] = "WaitingForHeaderRequest"; a[a.WaitingForHeaderAck = 1] = "WaitingForHeaderAck"; a[a.WaitingForFileRequest = 2] = "WaitingForFileRequest"; a[a.SendingData = 3] = "SendingData"; a[a.WaitingForFileAck = 4] = "WaitingForFileAck" })(YModemSendState || (YModemSendState = {}));